/*
tiktok shop openapi

sdk for apis

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package product_v202309

import (
    "encoding/json"
    "tiktokshop/open/sdk_golang/utils"
)

            // checks if the Product202309GetCategoriesResponseDataCategories type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Product202309GetCategoriesResponseDataCategories{}

// Product202309GetCategoriesResponseDataCategories struct for Product202309GetCategoriesResponseDataCategories
type Product202309GetCategoriesResponseDataCategories struct {
    // The category ID.
    Id *string `json:"id,omitempty"`
    // A flag to indicate if the category is a leaf category.   **Note**: You can only create or edit products that belong to a leaf category.
    IsLeaf *bool `json:"is_leaf,omitempty"`
    // The name of the category in the country where the shop operates.
    LocalName *string `json:"local_name,omitempty"`
    // The parent category ID.  For the root category, the parent ID is `0`.
    ParentId *string `json:"parent_id,omitempty"`
    // The shop's permission status for this category. Possible values: - `AVAILABLE`: You have the permission to create products in this category. - `INVITE_ONLY`: This is a restricted category and you do not have permission to use it. Submit an application through the Qualification Center on TikTok Shop Seller Center to gain access. In Seller Center, `INVITE_ONLY` is also known as \"restricted\". - `NON_MAIN_CATEGORY`: This category is out of scope for this shop, and you do not have permission to use it.  Contact your account manager for assistance. - `PROHIBITED`: This category is prohibited on TikTok Shop. Do not attempt to list products in this category as they will be rejected during audit. Applicable only for BR, MX, EU and SEA markets.
    PermissionStatuses []string `json:"permission_statuses,omitempty"`
}

// NewProduct202309GetCategoriesResponseDataCategories instantiates a new Product202309GetCategoriesResponseDataCategories object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProduct202309GetCategoriesResponseDataCategories() *Product202309GetCategoriesResponseDataCategories {
    this := Product202309GetCategoriesResponseDataCategories{}
    return &this
}

// NewProduct202309GetCategoriesResponseDataCategoriesWithDefaults instantiates a new Product202309GetCategoriesResponseDataCategories object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProduct202309GetCategoriesResponseDataCategoriesWithDefaults() *Product202309GetCategoriesResponseDataCategories {
    this := Product202309GetCategoriesResponseDataCategories{}
    return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Product202309GetCategoriesResponseDataCategories) GetId() string {
    if o == nil || utils.IsNil(o.Id) {
        var ret string
        return ret
    }
    return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Product202309GetCategoriesResponseDataCategories) GetIdOk() (*string, bool) {
    if o == nil || utils.IsNil(o.Id) {
        return nil, false
    }
    return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Product202309GetCategoriesResponseDataCategories) HasId() bool {
    if o != nil && !utils.IsNil(o.Id) {
        return true
    }

    return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Product202309GetCategoriesResponseDataCategories) SetId(v string) {
    o.Id = &v
}

// GetIsLeaf returns the IsLeaf field value if set, zero value otherwise.
func (o *Product202309GetCategoriesResponseDataCategories) GetIsLeaf() bool {
    if o == nil || utils.IsNil(o.IsLeaf) {
        var ret bool
        return ret
    }
    return *o.IsLeaf
}

// GetIsLeafOk returns a tuple with the IsLeaf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Product202309GetCategoriesResponseDataCategories) GetIsLeafOk() (*bool, bool) {
    if o == nil || utils.IsNil(o.IsLeaf) {
        return nil, false
    }
    return o.IsLeaf, true
}

// HasIsLeaf returns a boolean if a field has been set.
func (o *Product202309GetCategoriesResponseDataCategories) HasIsLeaf() bool {
    if o != nil && !utils.IsNil(o.IsLeaf) {
        return true
    }

    return false
}

// SetIsLeaf gets a reference to the given bool and assigns it to the IsLeaf field.
func (o *Product202309GetCategoriesResponseDataCategories) SetIsLeaf(v bool) {
    o.IsLeaf = &v
}

// GetLocalName returns the LocalName field value if set, zero value otherwise.
func (o *Product202309GetCategoriesResponseDataCategories) GetLocalName() string {
    if o == nil || utils.IsNil(o.LocalName) {
        var ret string
        return ret
    }
    return *o.LocalName
}

// GetLocalNameOk returns a tuple with the LocalName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Product202309GetCategoriesResponseDataCategories) GetLocalNameOk() (*string, bool) {
    if o == nil || utils.IsNil(o.LocalName) {
        return nil, false
    }
    return o.LocalName, true
}

// HasLocalName returns a boolean if a field has been set.
func (o *Product202309GetCategoriesResponseDataCategories) HasLocalName() bool {
    if o != nil && !utils.IsNil(o.LocalName) {
        return true
    }

    return false
}

// SetLocalName gets a reference to the given string and assigns it to the LocalName field.
func (o *Product202309GetCategoriesResponseDataCategories) SetLocalName(v string) {
    o.LocalName = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *Product202309GetCategoriesResponseDataCategories) GetParentId() string {
    if o == nil || utils.IsNil(o.ParentId) {
        var ret string
        return ret
    }
    return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Product202309GetCategoriesResponseDataCategories) GetParentIdOk() (*string, bool) {
    if o == nil || utils.IsNil(o.ParentId) {
        return nil, false
    }
    return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *Product202309GetCategoriesResponseDataCategories) HasParentId() bool {
    if o != nil && !utils.IsNil(o.ParentId) {
        return true
    }

    return false
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *Product202309GetCategoriesResponseDataCategories) SetParentId(v string) {
    o.ParentId = &v
}

// GetPermissionStatuses returns the PermissionStatuses field value if set, zero value otherwise.
func (o *Product202309GetCategoriesResponseDataCategories) GetPermissionStatuses() []string {
    if o == nil || utils.IsNil(o.PermissionStatuses) {
        var ret []string
        return ret
    }
    return o.PermissionStatuses
}

// GetPermissionStatusesOk returns a tuple with the PermissionStatuses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Product202309GetCategoriesResponseDataCategories) GetPermissionStatusesOk() ([]string, bool) {
    if o == nil || utils.IsNil(o.PermissionStatuses) {
        return nil, false
    }
    return o.PermissionStatuses, true
}

// HasPermissionStatuses returns a boolean if a field has been set.
func (o *Product202309GetCategoriesResponseDataCategories) HasPermissionStatuses() bool {
    if o != nil && !utils.IsNil(o.PermissionStatuses) {
        return true
    }

    return false
}

// SetPermissionStatuses gets a reference to the given []string and assigns it to the PermissionStatuses field.
func (o *Product202309GetCategoriesResponseDataCategories) SetPermissionStatuses(v []string) {
    o.PermissionStatuses = v
}

func (o Product202309GetCategoriesResponseDataCategories) MarshalJSON() ([]byte, error) {
    toSerialize,err := o.ToMap()
    if err != nil {
        return []byte{}, err
    }
    return json.Marshal(toSerialize)
}

func (o Product202309GetCategoriesResponseDataCategories) ToMap() (map[string]interface{}, error) {
    toSerialize := map[string]interface{}{}
    if !utils.IsNil(o.Id) {
        toSerialize["id"] = o.Id
    }
    if !utils.IsNil(o.IsLeaf) {
        toSerialize["is_leaf"] = o.IsLeaf
    }
    if !utils.IsNil(o.LocalName) {
        toSerialize["local_name"] = o.LocalName
    }
    if !utils.IsNil(o.ParentId) {
        toSerialize["parent_id"] = o.ParentId
    }
    if !utils.IsNil(o.PermissionStatuses) {
        toSerialize["permission_statuses"] = o.PermissionStatuses
    }
    return toSerialize, nil
}

type NullableProduct202309GetCategoriesResponseDataCategories struct {
	value *Product202309GetCategoriesResponseDataCategories
	isSet bool
}

func (v NullableProduct202309GetCategoriesResponseDataCategories) Get() *Product202309GetCategoriesResponseDataCategories {
	return v.value
}

func (v *NullableProduct202309GetCategoriesResponseDataCategories) Set(val *Product202309GetCategoriesResponseDataCategories) {
	v.value = val
	v.isSet = true
}

func (v NullableProduct202309GetCategoriesResponseDataCategories) IsSet() bool {
	return v.isSet
}

func (v *NullableProduct202309GetCategoriesResponseDataCategories) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProduct202309GetCategoriesResponseDataCategories(val *Product202309GetCategoriesResponseDataCategories) *NullableProduct202309GetCategoriesResponseDataCategories {
	return &NullableProduct202309GetCategoriesResponseDataCategories{value: val, isSet: true}
}

func (v NullableProduct202309GetCategoriesResponseDataCategories) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProduct202309GetCategoriesResponseDataCategories) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


