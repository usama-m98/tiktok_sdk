/*
tiktok shop openapi

sdk for apis

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package product_v202312

import (
    "encoding/json"
    "tiktokshop/open/sdk_golang/utils"
)

            // checks if the Product202312SearchProductsResponseDataProductsAudit type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Product202312SearchProductsResponseDataProductsAudit{}

// Product202312SearchProductsResponseDataProductsAudit struct for Product202312SearchProductsResponseDataProductsAudit
type Product202312SearchProductsResponseDataProductsAudit struct {
    // The reason why the product is pre-approved.  Applicable only if `audit.status=PRE_APPROVED`, otherwise returns an empty array.  Possible values: - KYC_PENDING: The seller's onboarding (KYC - Know Your Customer information) is incomplete or awaiting processing. - RESTRICTED_CATEGORY_PENDING: The product is in a restricted category, and category approval is still pending. To request access, submit an application through the Qualification Center on TikTok Shop Seller Center. Applicable only for the US market.
    PreApprovedReasons []string `json:"pre_approved_reasons,omitempty"`
    // The product audit status. Possible values:  - NONE: The product is not applicable for audit because it has not been submitted for listing on this platform, or it is in a draft, frozen, or deactivated state. - AUDITING: The product is currently being audited. - FAILED: The product failed the audit, or the audit was cancelled. - PRE_APPROVED: The product has passed the audit but is not yet listed due to pending prerequisites. Refer to `pre_approved_reasons` for the prerequisites. - APPROVED: The product passed the audit and has been listed on the platform.
    Status *string `json:"status,omitempty"`
}

// NewProduct202312SearchProductsResponseDataProductsAudit instantiates a new Product202312SearchProductsResponseDataProductsAudit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProduct202312SearchProductsResponseDataProductsAudit() *Product202312SearchProductsResponseDataProductsAudit {
    this := Product202312SearchProductsResponseDataProductsAudit{}
    return &this
}

// NewProduct202312SearchProductsResponseDataProductsAuditWithDefaults instantiates a new Product202312SearchProductsResponseDataProductsAudit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProduct202312SearchProductsResponseDataProductsAuditWithDefaults() *Product202312SearchProductsResponseDataProductsAudit {
    this := Product202312SearchProductsResponseDataProductsAudit{}
    return &this
}

// GetPreApprovedReasons returns the PreApprovedReasons field value if set, zero value otherwise.
func (o *Product202312SearchProductsResponseDataProductsAudit) GetPreApprovedReasons() []string {
    if o == nil || utils.IsNil(o.PreApprovedReasons) {
        var ret []string
        return ret
    }
    return o.PreApprovedReasons
}

// GetPreApprovedReasonsOk returns a tuple with the PreApprovedReasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Product202312SearchProductsResponseDataProductsAudit) GetPreApprovedReasonsOk() ([]string, bool) {
    if o == nil || utils.IsNil(o.PreApprovedReasons) {
        return nil, false
    }
    return o.PreApprovedReasons, true
}

// HasPreApprovedReasons returns a boolean if a field has been set.
func (o *Product202312SearchProductsResponseDataProductsAudit) HasPreApprovedReasons() bool {
    if o != nil && !utils.IsNil(o.PreApprovedReasons) {
        return true
    }

    return false
}

// SetPreApprovedReasons gets a reference to the given []string and assigns it to the PreApprovedReasons field.
func (o *Product202312SearchProductsResponseDataProductsAudit) SetPreApprovedReasons(v []string) {
    o.PreApprovedReasons = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Product202312SearchProductsResponseDataProductsAudit) GetStatus() string {
    if o == nil || utils.IsNil(o.Status) {
        var ret string
        return ret
    }
    return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Product202312SearchProductsResponseDataProductsAudit) GetStatusOk() (*string, bool) {
    if o == nil || utils.IsNil(o.Status) {
        return nil, false
    }
    return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Product202312SearchProductsResponseDataProductsAudit) HasStatus() bool {
    if o != nil && !utils.IsNil(o.Status) {
        return true
    }

    return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Product202312SearchProductsResponseDataProductsAudit) SetStatus(v string) {
    o.Status = &v
}

func (o Product202312SearchProductsResponseDataProductsAudit) MarshalJSON() ([]byte, error) {
    toSerialize,err := o.ToMap()
    if err != nil {
        return []byte{}, err
    }
    return json.Marshal(toSerialize)
}

func (o Product202312SearchProductsResponseDataProductsAudit) ToMap() (map[string]interface{}, error) {
    toSerialize := map[string]interface{}{}
    if !utils.IsNil(o.PreApprovedReasons) {
        toSerialize["pre_approved_reasons"] = o.PreApprovedReasons
    }
    if !utils.IsNil(o.Status) {
        toSerialize["status"] = o.Status
    }
    return toSerialize, nil
}

type NullableProduct202312SearchProductsResponseDataProductsAudit struct {
	value *Product202312SearchProductsResponseDataProductsAudit
	isSet bool
}

func (v NullableProduct202312SearchProductsResponseDataProductsAudit) Get() *Product202312SearchProductsResponseDataProductsAudit {
	return v.value
}

func (v *NullableProduct202312SearchProductsResponseDataProductsAudit) Set(val *Product202312SearchProductsResponseDataProductsAudit) {
	v.value = val
	v.isSet = true
}

func (v NullableProduct202312SearchProductsResponseDataProductsAudit) IsSet() bool {
	return v.isSet
}

func (v *NullableProduct202312SearchProductsResponseDataProductsAudit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProduct202312SearchProductsResponseDataProductsAudit(val *Product202312SearchProductsResponseDataProductsAudit) *NullableProduct202312SearchProductsResponseDataProductsAudit {
	return &NullableProduct202312SearchProductsResponseDataProductsAudit{value: val, isSet: true}
}

func (v NullableProduct202312SearchProductsResponseDataProductsAudit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProduct202312SearchProductsResponseDataProductsAudit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


