/*
tiktok shop openapi

sdk for apis

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apis

import (
    "bytes"
    "context"
    "io"
    "net/http"
    "net/url"

    "tiktokshop/open/sdk_golang/models/data_reconciliation/v202310"
)


// DataReconciliationV202310APIService DataReconciliationV202310API service
type DataReconciliationV202310APIService service

type ApiDataReconciliation202310OrdersImportPostRequest struct {
    ctx context.Context
    ApiService *DataReconciliationV202310APIService
    xTtsAccessToken *string
    contentType *string
    shopCipher *string
    dataReconciliation202310QualityFactoryOrderDataImportAPIRequestBody *data_reconciliation_v202310.DataReconciliation202310QualityFactoryOrderDataImportAPIRequestBody
}

// 
func (r ApiDataReconciliation202310OrdersImportPostRequest) XTtsAccessToken(xTtsAccessToken string) ApiDataReconciliation202310OrdersImportPostRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiDataReconciliation202310OrdersImportPostRequest) ContentType(contentType string) ApiDataReconciliation202310OrdersImportPostRequest {
    r.contentType = &contentType
    return r
}
// 
func (r ApiDataReconciliation202310OrdersImportPostRequest) ShopCipher(shopCipher string) ApiDataReconciliation202310OrdersImportPostRequest {
    r.shopCipher = &shopCipher
    return r
}
func (r ApiDataReconciliation202310OrdersImportPostRequest) DataReconciliation202310QualityFactoryOrderDataImportAPIRequestBody(dataReconciliation202310QualityFactoryOrderDataImportAPIRequestBody data_reconciliation_v202310.DataReconciliation202310QualityFactoryOrderDataImportAPIRequestBody) ApiDataReconciliation202310OrdersImportPostRequest {
    r.dataReconciliation202310QualityFactoryOrderDataImportAPIRequestBody = &dataReconciliation202310QualityFactoryOrderDataImportAPIRequestBody
    return r
}
func (r ApiDataReconciliation202310OrdersImportPostRequest) Execute() (*data_reconciliation_v202310.DataReconciliation202310QualityFactoryOrderDataImportAPIResponse, *http.Response, error) {
    return r.ApiService.DataReconciliation202310OrdersImportPostExecute(r)
}

/*
DataReconciliation202310OrdersImportPost QualityFactoryOrderDataImportAPI
TikTok Shop-Connector exchange order data from DTC(Direct To Consumer) platform to Tiktok Shop-QE system to compare the order data of DTC platform and Tiktok Shop. Which systems of users are involved with the API? For example, DTC platform Connector App, Shipping App, WMS, PIM, Multi Channel App, etc.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiDataReconciliation202310OrdersImportPostRequest
*/
func (a *DataReconciliationV202310APIService) DataReconciliation202310OrdersImportPost(ctx context.Context) ApiDataReconciliation202310OrdersImportPostRequest {
    return ApiDataReconciliation202310OrdersImportPostRequest{
        ApiService: a,
        ctx: ctx,
    }
}

// Execute executes the request
//  @return DataReconciliation202310QualityFactoryOrderDataImportAPIResponse
func (a *DataReconciliationV202310APIService) DataReconciliation202310OrdersImportPostExecute(r ApiDataReconciliation202310OrdersImportPostRequest) (*data_reconciliation_v202310.DataReconciliation202310QualityFactoryOrderDataImportAPIResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodPost
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *data_reconciliation_v202310.DataReconciliation202310QualityFactoryOrderDataImportAPIResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataReconciliationV202310APIService.DataReconciliation202310OrdersImportPost")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/data_reconciliation/202310/orders/import"

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    if r.shopCipher != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "shop_cipher", r.shopCipher, "")
    }
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{"application/json"}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    // body params
    localVarPostBody = r.dataReconciliation202310QualityFactoryOrderDataImportAPIRequestBody
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}
