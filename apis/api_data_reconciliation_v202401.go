/*
tiktok shop openapi

sdk for apis

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apis

import (
    "bytes"
    "context"
    "io"
    "net/http"
    "net/url"

    "tiktokshop/open/sdk_golang/models/data_reconciliation/v202401"
)


// DataReconciliationV202401APIService DataReconciliationV202401API service
type DataReconciliationV202401APIService service

type ApiDataReconciliation202401OrdersImportPostRequest struct {
    ctx context.Context
    ApiService *DataReconciliationV202401APIService
    xTtsAccessToken *string
    contentType *string
    shopCipher *string
    dataReconciliation202401QualityFactoryOrderDataImportAPIRequestBody *data_reconciliation_v202401.DataReconciliation202401QualityFactoryOrderDataImportAPIRequestBody
}

// 
func (r ApiDataReconciliation202401OrdersImportPostRequest) XTtsAccessToken(xTtsAccessToken string) ApiDataReconciliation202401OrdersImportPostRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiDataReconciliation202401OrdersImportPostRequest) ContentType(contentType string) ApiDataReconciliation202401OrdersImportPostRequest {
    r.contentType = &contentType
    return r
}
// 
func (r ApiDataReconciliation202401OrdersImportPostRequest) ShopCipher(shopCipher string) ApiDataReconciliation202401OrdersImportPostRequest {
    r.shopCipher = &shopCipher
    return r
}
func (r ApiDataReconciliation202401OrdersImportPostRequest) DataReconciliation202401QualityFactoryOrderDataImportAPIRequestBody(dataReconciliation202401QualityFactoryOrderDataImportAPIRequestBody data_reconciliation_v202401.DataReconciliation202401QualityFactoryOrderDataImportAPIRequestBody) ApiDataReconciliation202401OrdersImportPostRequest {
    r.dataReconciliation202401QualityFactoryOrderDataImportAPIRequestBody = &dataReconciliation202401QualityFactoryOrderDataImportAPIRequestBody
    return r
}
func (r ApiDataReconciliation202401OrdersImportPostRequest) Execute() (*data_reconciliation_v202401.DataReconciliation202401QualityFactoryOrderDataImportAPIResponse, *http.Response, error) {
    return r.ApiService.DataReconciliation202401OrdersImportPostExecute(r)
}

/*
DataReconciliation202401OrdersImportPost QualityFactoryOrderDataImportAPI
TikTok Shop-Connector exchange order data from DTC(Direct To Consumer) platform to Tiktok Shop-QE system to compare the order data of DTC platform and Tiktok Shop. Which systems of users are involved with the API? For example, DTC platform Connector App, Shipping App, WMS, PIM, Multi Channel App, etc.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiDataReconciliation202401OrdersImportPostRequest
*/
func (a *DataReconciliationV202401APIService) DataReconciliation202401OrdersImportPost(ctx context.Context) ApiDataReconciliation202401OrdersImportPostRequest {
    return ApiDataReconciliation202401OrdersImportPostRequest{
        ApiService: a,
        ctx: ctx,
    }
}

// Execute executes the request
//  @return DataReconciliation202401QualityFactoryOrderDataImportAPIResponse
func (a *DataReconciliationV202401APIService) DataReconciliation202401OrdersImportPostExecute(r ApiDataReconciliation202401OrdersImportPostRequest) (*data_reconciliation_v202401.DataReconciliation202401QualityFactoryOrderDataImportAPIResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodPost
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *data_reconciliation_v202401.DataReconciliation202401QualityFactoryOrderDataImportAPIResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataReconciliationV202401APIService.DataReconciliation202401OrdersImportPost")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/data_reconciliation/202401/orders/import"

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    if r.shopCipher != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "shop_cipher", r.shopCipher, "")
    }
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{"application/json"}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    // body params
    localVarPostBody = r.dataReconciliation202401QualityFactoryOrderDataImportAPIRequestBody
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}
