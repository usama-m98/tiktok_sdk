/*
tiktok shop openapi

sdk for apis

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apis

import (
    "bytes"
    "context"
    "io"
    "net/http"
    "net/url"

    "tiktokshop/open/sdk_golang/models/product/v202505"
)


// ProductV202505APIService ProductV202505API service
type ProductV202505APIService service

type ApiProduct202505ImagesTranslationTasksPostRequest struct {
    ctx context.Context
    ApiService *ProductV202505APIService
    xTtsAccessToken *string
    contentType *string
    shopCipher *string
    product202505CreateImageTranslationTasksRequestBody *product_v202505.Product202505CreateImageTranslationTasksRequestBody
}

// 
func (r ApiProduct202505ImagesTranslationTasksPostRequest) XTtsAccessToken(xTtsAccessToken string) ApiProduct202505ImagesTranslationTasksPostRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiProduct202505ImagesTranslationTasksPostRequest) ContentType(contentType string) ApiProduct202505ImagesTranslationTasksPostRequest {
    r.contentType = &contentType
    return r
}
// 
func (r ApiProduct202505ImagesTranslationTasksPostRequest) ShopCipher(shopCipher string) ApiProduct202505ImagesTranslationTasksPostRequest {
    r.shopCipher = &shopCipher
    return r
}
func (r ApiProduct202505ImagesTranslationTasksPostRequest) Product202505CreateImageTranslationTasksRequestBody(product202505CreateImageTranslationTasksRequestBody product_v202505.Product202505CreateImageTranslationTasksRequestBody) ApiProduct202505ImagesTranslationTasksPostRequest {
    r.product202505CreateImageTranslationTasksRequestBody = &product202505CreateImageTranslationTasksRequestBody
    return r
}
func (r ApiProduct202505ImagesTranslationTasksPostRequest) Execute() (*product_v202505.Product202505CreateImageTranslationTasksResponse, *http.Response, error) {
    return r.ApiService.Product202505ImagesTranslationTasksPostExecute(r)
}

/*
Product202505ImagesTranslationTasksPost CreateImageTranslationTasks
Initiates a translation task for one or more images. This asynchronous API queues the images for processing in the specified target language. 
Applicable only for sellers that sell across EU.
Use the [Image Translation Completed webhook](684f8d9bcc4e44049347a12e) to monitor the translation progress, or pass the task ID to the [Get Image Translation Tasks API](684f8b2d535a9d048f234564) to retrieve the status and the translated images.
**Note**: 
- Please wait 5 minutes after task creation before calling the Get endpoint, and retry at intervals over 10 seconds to avoid rate limiting.
- Each task corresponds to the translation of 1 image into 1 target language.
- You can create up to 20 tasks per call and 500 tasks per day. Any tasks beyond the daily limit will be rejected.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiProduct202505ImagesTranslationTasksPostRequest
*/
func (a *ProductV202505APIService) Product202505ImagesTranslationTasksPost(ctx context.Context) ApiProduct202505ImagesTranslationTasksPostRequest {
    return ApiProduct202505ImagesTranslationTasksPostRequest{
        ApiService: a,
        ctx: ctx,
    }
}

// Execute executes the request
//  @return Product202505CreateImageTranslationTasksResponse
func (a *ProductV202505APIService) Product202505ImagesTranslationTasksPostExecute(r ApiProduct202505ImagesTranslationTasksPostRequest) (*product_v202505.Product202505CreateImageTranslationTasksResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodPost
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *product_v202505.Product202505CreateImageTranslationTasksResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductV202505APIService.Product202505ImagesTranslationTasksPost")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/product/202505/images/translation_tasks"

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    if r.shopCipher != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "shop_cipher", r.shopCipher, "")
    }
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{"application/json"}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    // body params
    localVarPostBody = r.product202505CreateImageTranslationTasksRequestBody
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}
