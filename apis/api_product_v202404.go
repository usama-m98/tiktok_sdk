/*
tiktok shop openapi

sdk for apis

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apis

import (
    "bytes"
    "context"
    "io"
    "net/http"
    "net/url"

    "tiktokshop/open/sdk_golang/models/product/v202404"
)


// ProductV202404APIService ProductV202404API service
type ProductV202404APIService service

type ApiProduct202404ImagesOptimizePostRequest struct {
    ctx context.Context
    ApiService *ProductV202404APIService
    xTtsAccessToken *string
    contentType *string
    shopCipher *string
    product202404OptimizedImagesRequestBody *product_v202404.Product202404OptimizedImagesRequestBody
}

// 
func (r ApiProduct202404ImagesOptimizePostRequest) XTtsAccessToken(xTtsAccessToken string) ApiProduct202404ImagesOptimizePostRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiProduct202404ImagesOptimizePostRequest) ContentType(contentType string) ApiProduct202404ImagesOptimizePostRequest {
    r.contentType = &contentType
    return r
}
// 
func (r ApiProduct202404ImagesOptimizePostRequest) ShopCipher(shopCipher string) ApiProduct202404ImagesOptimizePostRequest {
    r.shopCipher = &shopCipher
    return r
}
func (r ApiProduct202404ImagesOptimizePostRequest) Product202404OptimizedImagesRequestBody(product202404OptimizedImagesRequestBody product_v202404.Product202404OptimizedImagesRequestBody) ApiProduct202404ImagesOptimizePostRequest {
    r.product202404OptimizedImagesRequestBody = &product202404OptimizedImagesRequestBody
    return r
}
func (r ApiProduct202404ImagesOptimizePostRequest) Execute() (*product_v202404.Product202404OptimizedImagesResponse, *http.Response, error) {
    return r.ApiService.Product202404ImagesOptimizePostExecute(r)
}

/*
Product202404ImagesOptimizePost OptimizedImages
Optimize images used in your TikTok Shop by changing the background to white.
This is especially useful for images displayed in the product image gallery as it enhances product visibility. 
**Note**: 
- The images to be optimized must first be uploaded to TikTok Shop through the [Upload Product Image API](https://partner.tiktokshop.com/docv2/page/6509df95defece02be598a22). You will not be able to optimize any images that are not hosted by TikTok Shop.
- Images that were previously optimized will not be processed again.
- The optimization is processed asynchronously and typically completes within a few seconds. Therefore, the `optimize_status` returned in the first API request for an image is always `PROCESSING`, indicating that optimization is underway. Please call the API again after a few seconds to get the final optimization status.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiProduct202404ImagesOptimizePostRequest
*/
func (a *ProductV202404APIService) Product202404ImagesOptimizePost(ctx context.Context) ApiProduct202404ImagesOptimizePostRequest {
    return ApiProduct202404ImagesOptimizePostRequest{
        ApiService: a,
        ctx: ctx,
    }
}

// Execute executes the request
//  @return Product202404OptimizedImagesResponse
func (a *ProductV202404APIService) Product202404ImagesOptimizePostExecute(r ApiProduct202404ImagesOptimizePostRequest) (*product_v202404.Product202404OptimizedImagesResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodPost
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *product_v202404.Product202404OptimizedImagesResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductV202404APIService.Product202404ImagesOptimizePost")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/product/202404/images/optimize"

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    if r.shopCipher != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "shop_cipher", r.shopCipher, "")
    }
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{"application/json"}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    // body params
    localVarPostBody = r.product202404OptimizedImagesRequestBody
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}
