/*
tiktok shop openapi

sdk for apis

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apis

import (
    "bytes"
    "context"
    "io"
    "net/http"
    "net/url"
    "strings"

    "tiktokshop/open/sdk_golang/models/promotion/v202309"
)


// PromotionV202309APIService PromotionV202309API service
type PromotionV202309APIService service

type ApiPromotion202309ActivitiesActivityIdDeactivatePostRequest struct {
    ctx context.Context
    ApiService *PromotionV202309APIService
    activityId string
    xTtsAccessToken *string
    contentType *string
    shopCipher *string
}

// 
func (r ApiPromotion202309ActivitiesActivityIdDeactivatePostRequest) XTtsAccessToken(xTtsAccessToken string) ApiPromotion202309ActivitiesActivityIdDeactivatePostRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiPromotion202309ActivitiesActivityIdDeactivatePostRequest) ContentType(contentType string) ApiPromotion202309ActivitiesActivityIdDeactivatePostRequest {
    r.contentType = &contentType
    return r
}
// 
func (r ApiPromotion202309ActivitiesActivityIdDeactivatePostRequest) ShopCipher(shopCipher string) ApiPromotion202309ActivitiesActivityIdDeactivatePostRequest {
    r.shopCipher = &shopCipher
    return r
}
func (r ApiPromotion202309ActivitiesActivityIdDeactivatePostRequest) Execute() (*promotion_v202309.Promotion202309DeactivateActivityResponse, *http.Response, error) {
    return r.ApiService.Promotion202309ActivitiesActivityIdDeactivatePostExecute(r)
}

/*
Promotion202309ActivitiesActivityIdDeactivatePost DeactivateActivity
Deactivate an ongoing or upcoming activity.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@param activityId A unique ID that identifies different activities.
@return ApiPromotion202309ActivitiesActivityIdDeactivatePostRequest
*/
func (a *PromotionV202309APIService) Promotion202309ActivitiesActivityIdDeactivatePost(ctx context.Context, activityId string) ApiPromotion202309ActivitiesActivityIdDeactivatePostRequest {
    return ApiPromotion202309ActivitiesActivityIdDeactivatePostRequest{
        ApiService: a,
        ctx: ctx,
        activityId: activityId,
    }
}

// Execute executes the request
//  @return Promotion202309DeactivateActivityResponse
func (a *PromotionV202309APIService) Promotion202309ActivitiesActivityIdDeactivatePostExecute(r ApiPromotion202309ActivitiesActivityIdDeactivatePostRequest) (*promotion_v202309.Promotion202309DeactivateActivityResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodPost
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *promotion_v202309.Promotion202309DeactivateActivityResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PromotionV202309APIService.Promotion202309ActivitiesActivityIdDeactivatePost")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/promotion/202309/activities/{activity_id}/deactivate"
    localVarPath = strings.Replace(localVarPath, "{"+"activity_id"+"}", url.PathEscape(parameterValueToString(r.activityId, "activityId")), -1)

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    if r.shopCipher != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "shop_cipher", r.shopCipher, "")
    }
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPromotion202309ActivitiesActivityIdGetRequest struct {
    ctx context.Context
    ApiService *PromotionV202309APIService
    activityId string
    xTtsAccessToken *string
    contentType *string
    shopCipher *string
}

// 
func (r ApiPromotion202309ActivitiesActivityIdGetRequest) XTtsAccessToken(xTtsAccessToken string) ApiPromotion202309ActivitiesActivityIdGetRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiPromotion202309ActivitiesActivityIdGetRequest) ContentType(contentType string) ApiPromotion202309ActivitiesActivityIdGetRequest {
    r.contentType = &contentType
    return r
}
// 
func (r ApiPromotion202309ActivitiesActivityIdGetRequest) ShopCipher(shopCipher string) ApiPromotion202309ActivitiesActivityIdGetRequest {
    r.shopCipher = &shopCipher
    return r
}
func (r ApiPromotion202309ActivitiesActivityIdGetRequest) Execute() (*promotion_v202309.Promotion202309GetActivityResponse, *http.Response, error) {
    return r.ApiService.Promotion202309ActivitiesActivityIdGetExecute(r)
}

/*
Promotion202309ActivitiesActivityIdGet GetActivity
Get the details of a product discount or flash deal promotion activity. For coupon activities, use [Get Coupon](6699dce0de15e502ed219e37).

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@param activityId Activity ID
@return ApiPromotion202309ActivitiesActivityIdGetRequest
*/
func (a *PromotionV202309APIService) Promotion202309ActivitiesActivityIdGet(ctx context.Context, activityId string) ApiPromotion202309ActivitiesActivityIdGetRequest {
    return ApiPromotion202309ActivitiesActivityIdGetRequest{
        ApiService: a,
        ctx: ctx,
        activityId: activityId,
    }
}

// Execute executes the request
//  @return Promotion202309GetActivityResponse
func (a *PromotionV202309APIService) Promotion202309ActivitiesActivityIdGetExecute(r ApiPromotion202309ActivitiesActivityIdGetRequest) (*promotion_v202309.Promotion202309GetActivityResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodGet
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *promotion_v202309.Promotion202309GetActivityResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PromotionV202309APIService.Promotion202309ActivitiesActivityIdGet")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/promotion/202309/activities/{activity_id}"
    localVarPath = strings.Replace(localVarPath, "{"+"activity_id"+"}", url.PathEscape(parameterValueToString(r.activityId, "activityId")), -1)

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    if r.shopCipher != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "shop_cipher", r.shopCipher, "")
    }
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPromotion202309ActivitiesActivityIdProductsDeleteRequest struct {
    ctx context.Context
    ApiService *PromotionV202309APIService
    activityId string
    xTtsAccessToken *string
    contentType *string
    shopCipher *string
    promotion202309RemoveActivityProductRequestBody *promotion_v202309.Promotion202309RemoveActivityProductRequestBody
}

// 
func (r ApiPromotion202309ActivitiesActivityIdProductsDeleteRequest) XTtsAccessToken(xTtsAccessToken string) ApiPromotion202309ActivitiesActivityIdProductsDeleteRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiPromotion202309ActivitiesActivityIdProductsDeleteRequest) ContentType(contentType string) ApiPromotion202309ActivitiesActivityIdProductsDeleteRequest {
    r.contentType = &contentType
    return r
}
// 
func (r ApiPromotion202309ActivitiesActivityIdProductsDeleteRequest) ShopCipher(shopCipher string) ApiPromotion202309ActivitiesActivityIdProductsDeleteRequest {
    r.shopCipher = &shopCipher
    return r
}
func (r ApiPromotion202309ActivitiesActivityIdProductsDeleteRequest) Promotion202309RemoveActivityProductRequestBody(promotion202309RemoveActivityProductRequestBody promotion_v202309.Promotion202309RemoveActivityProductRequestBody) ApiPromotion202309ActivitiesActivityIdProductsDeleteRequest {
    r.promotion202309RemoveActivityProductRequestBody = &promotion202309RemoveActivityProductRequestBody
    return r
}
func (r ApiPromotion202309ActivitiesActivityIdProductsDeleteRequest) Execute() (*promotion_v202309.Promotion202309RemoveActivityProductResponse, *http.Response, error) {
    return r.ApiService.Promotion202309ActivitiesActivityIdProductsDeleteExecute(r)
}

/*
Promotion202309ActivitiesActivityIdProductsDelete RemoveActivityProduct
Use this API to remove products or SKUs from the existing product discount or flash sale promotion activity.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@param activityId Activity ID
@return ApiPromotion202309ActivitiesActivityIdProductsDeleteRequest
*/
func (a *PromotionV202309APIService) Promotion202309ActivitiesActivityIdProductsDelete(ctx context.Context, activityId string) ApiPromotion202309ActivitiesActivityIdProductsDeleteRequest {
    return ApiPromotion202309ActivitiesActivityIdProductsDeleteRequest{
        ApiService: a,
        ctx: ctx,
        activityId: activityId,
    }
}

// Execute executes the request
//  @return Promotion202309RemoveActivityProductResponse
func (a *PromotionV202309APIService) Promotion202309ActivitiesActivityIdProductsDeleteExecute(r ApiPromotion202309ActivitiesActivityIdProductsDeleteRequest) (*promotion_v202309.Promotion202309RemoveActivityProductResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodDelete
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *promotion_v202309.Promotion202309RemoveActivityProductResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PromotionV202309APIService.Promotion202309ActivitiesActivityIdProductsDelete")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/promotion/202309/activities/{activity_id}/products"
    localVarPath = strings.Replace(localVarPath, "{"+"activity_id"+"}", url.PathEscape(parameterValueToString(r.activityId, "activityId")), -1)

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    if r.shopCipher != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "shop_cipher", r.shopCipher, "")
    }
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{"application/json"}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    // body params
    localVarPostBody = r.promotion202309RemoveActivityProductRequestBody
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPromotion202309ActivitiesActivityIdProductsPutRequest struct {
    ctx context.Context
    ApiService *PromotionV202309APIService
    activityId string
    xTtsAccessToken *string
    contentType *string
    shopCipher *string
    promotion202309UpdateActivityProductRequestBody *promotion_v202309.Promotion202309UpdateActivityProductRequestBody
}

// 
func (r ApiPromotion202309ActivitiesActivityIdProductsPutRequest) XTtsAccessToken(xTtsAccessToken string) ApiPromotion202309ActivitiesActivityIdProductsPutRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiPromotion202309ActivitiesActivityIdProductsPutRequest) ContentType(contentType string) ApiPromotion202309ActivitiesActivityIdProductsPutRequest {
    r.contentType = &contentType
    return r
}
// 
func (r ApiPromotion202309ActivitiesActivityIdProductsPutRequest) ShopCipher(shopCipher string) ApiPromotion202309ActivitiesActivityIdProductsPutRequest {
    r.shopCipher = &shopCipher
    return r
}
func (r ApiPromotion202309ActivitiesActivityIdProductsPutRequest) Promotion202309UpdateActivityProductRequestBody(promotion202309UpdateActivityProductRequestBody promotion_v202309.Promotion202309UpdateActivityProductRequestBody) ApiPromotion202309ActivitiesActivityIdProductsPutRequest {
    r.promotion202309UpdateActivityProductRequestBody = &promotion202309UpdateActivityProductRequestBody
    return r
}
func (r ApiPromotion202309ActivitiesActivityIdProductsPutRequest) Execute() (*promotion_v202309.Promotion202309UpdateActivityProductResponse, *http.Response, error) {
    return r.ApiService.Promotion202309ActivitiesActivityIdProductsPutExecute(r)
}

/*
Promotion202309ActivitiesActivityIdProductsPut UpdateActivityProduct
Use this API to add the products or SKUs to the list of a product discount activity or a flash deal activity. You can also change the discounts on existing products or SKUs. To remove the products or SKUs from the list, use [Remove Activity Product](https://partner.tiktokshop.com/docv2/page/650acfd84a0bb702c072b4eb).

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@param activityId Activity ID
@return ApiPromotion202309ActivitiesActivityIdProductsPutRequest
*/
func (a *PromotionV202309APIService) Promotion202309ActivitiesActivityIdProductsPut(ctx context.Context, activityId string) ApiPromotion202309ActivitiesActivityIdProductsPutRequest {
    return ApiPromotion202309ActivitiesActivityIdProductsPutRequest{
        ApiService: a,
        ctx: ctx,
        activityId: activityId,
    }
}

// Execute executes the request
//  @return Promotion202309UpdateActivityProductResponse
func (a *PromotionV202309APIService) Promotion202309ActivitiesActivityIdProductsPutExecute(r ApiPromotion202309ActivitiesActivityIdProductsPutRequest) (*promotion_v202309.Promotion202309UpdateActivityProductResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodPut
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *promotion_v202309.Promotion202309UpdateActivityProductResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PromotionV202309APIService.Promotion202309ActivitiesActivityIdProductsPut")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/promotion/202309/activities/{activity_id}/products"
    localVarPath = strings.Replace(localVarPath, "{"+"activity_id"+"}", url.PathEscape(parameterValueToString(r.activityId, "activityId")), -1)

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    if r.shopCipher != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "shop_cipher", r.shopCipher, "")
    }
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{"application/json"}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    // body params
    localVarPostBody = r.promotion202309UpdateActivityProductRequestBody
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPromotion202309ActivitiesActivityIdPutRequest struct {
    ctx context.Context
    ApiService *PromotionV202309APIService
    activityId string
    xTtsAccessToken *string
    contentType *string
    shopCipher *string
    promotion202309UpdateActivityRequestBody *promotion_v202309.Promotion202309UpdateActivityRequestBody
}

// 
func (r ApiPromotion202309ActivitiesActivityIdPutRequest) XTtsAccessToken(xTtsAccessToken string) ApiPromotion202309ActivitiesActivityIdPutRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiPromotion202309ActivitiesActivityIdPutRequest) ContentType(contentType string) ApiPromotion202309ActivitiesActivityIdPutRequest {
    r.contentType = &contentType
    return r
}
// 
func (r ApiPromotion202309ActivitiesActivityIdPutRequest) ShopCipher(shopCipher string) ApiPromotion202309ActivitiesActivityIdPutRequest {
    r.shopCipher = &shopCipher
    return r
}
func (r ApiPromotion202309ActivitiesActivityIdPutRequest) Promotion202309UpdateActivityRequestBody(promotion202309UpdateActivityRequestBody promotion_v202309.Promotion202309UpdateActivityRequestBody) ApiPromotion202309ActivitiesActivityIdPutRequest {
    r.promotion202309UpdateActivityRequestBody = &promotion202309UpdateActivityRequestBody
    return r
}
func (r ApiPromotion202309ActivitiesActivityIdPutRequest) Execute() (*promotion_v202309.Promotion202309UpdateActivityResponse, *http.Response, error) {
    return r.ApiService.Promotion202309ActivitiesActivityIdPutExecute(r)
}

/*
Promotion202309ActivitiesActivityIdPut UpdateActivity
Change the title and the beginning and end time of the existing product discount or flash sale promotion activity.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@param activityId Activity ID
@return ApiPromotion202309ActivitiesActivityIdPutRequest
*/
func (a *PromotionV202309APIService) Promotion202309ActivitiesActivityIdPut(ctx context.Context, activityId string) ApiPromotion202309ActivitiesActivityIdPutRequest {
    return ApiPromotion202309ActivitiesActivityIdPutRequest{
        ApiService: a,
        ctx: ctx,
        activityId: activityId,
    }
}

// Execute executes the request
//  @return Promotion202309UpdateActivityResponse
func (a *PromotionV202309APIService) Promotion202309ActivitiesActivityIdPutExecute(r ApiPromotion202309ActivitiesActivityIdPutRequest) (*promotion_v202309.Promotion202309UpdateActivityResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodPut
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *promotion_v202309.Promotion202309UpdateActivityResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PromotionV202309APIService.Promotion202309ActivitiesActivityIdPut")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/promotion/202309/activities/{activity_id}"
    localVarPath = strings.Replace(localVarPath, "{"+"activity_id"+"}", url.PathEscape(parameterValueToString(r.activityId, "activityId")), -1)

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    if r.shopCipher != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "shop_cipher", r.shopCipher, "")
    }
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{"application/json"}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    // body params
    localVarPostBody = r.promotion202309UpdateActivityRequestBody
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPromotion202309ActivitiesPostRequest struct {
    ctx context.Context
    ApiService *PromotionV202309APIService
    xTtsAccessToken *string
    contentType *string
    shopCipher *string
    promotion202309CreateActivityRequestBody *promotion_v202309.Promotion202309CreateActivityRequestBody
}

// 
func (r ApiPromotion202309ActivitiesPostRequest) XTtsAccessToken(xTtsAccessToken string) ApiPromotion202309ActivitiesPostRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiPromotion202309ActivitiesPostRequest) ContentType(contentType string) ApiPromotion202309ActivitiesPostRequest {
    r.contentType = &contentType
    return r
}
// 
func (r ApiPromotion202309ActivitiesPostRequest) ShopCipher(shopCipher string) ApiPromotion202309ActivitiesPostRequest {
    r.shopCipher = &shopCipher
    return r
}
func (r ApiPromotion202309ActivitiesPostRequest) Promotion202309CreateActivityRequestBody(promotion202309CreateActivityRequestBody promotion_v202309.Promotion202309CreateActivityRequestBody) ApiPromotion202309ActivitiesPostRequest {
    r.promotion202309CreateActivityRequestBody = &promotion202309CreateActivityRequestBody
    return r
}
func (r ApiPromotion202309ActivitiesPostRequest) Execute() (*promotion_v202309.Promotion202309CreateActivityResponse, *http.Response, error) {
    return r.ApiService.Promotion202309ActivitiesPostExecute(r)
}

/*
Promotion202309ActivitiesPost CreateActivity
Use this API to create a product discount activity or a flash deal activity. You cannot create a coupon activity with this API. To do that, you'll need to go to the seller center or the seller app. To update the products or SKUs included in the activity, use [Update Activity Product](https://partner.tiktokshop.com/docv2/page/650d32c42aaa3602b86ccb5c).

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiPromotion202309ActivitiesPostRequest
*/
func (a *PromotionV202309APIService) Promotion202309ActivitiesPost(ctx context.Context) ApiPromotion202309ActivitiesPostRequest {
    return ApiPromotion202309ActivitiesPostRequest{
        ApiService: a,
        ctx: ctx,
    }
}

// Execute executes the request
//  @return Promotion202309CreateActivityResponse
func (a *PromotionV202309APIService) Promotion202309ActivitiesPostExecute(r ApiPromotion202309ActivitiesPostRequest) (*promotion_v202309.Promotion202309CreateActivityResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodPost
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *promotion_v202309.Promotion202309CreateActivityResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PromotionV202309APIService.Promotion202309ActivitiesPost")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/promotion/202309/activities"

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    if r.shopCipher != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "shop_cipher", r.shopCipher, "")
    }
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{"application/json"}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    // body params
    localVarPostBody = r.promotion202309CreateActivityRequestBody
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPromotion202309ActivitiesSearchPostRequest struct {
    ctx context.Context
    ApiService *PromotionV202309APIService
    xTtsAccessToken *string
    contentType *string
    shopCipher *string
    promotion202309SearchActivitiesRequestBody *promotion_v202309.Promotion202309SearchActivitiesRequestBody
}

// 
func (r ApiPromotion202309ActivitiesSearchPostRequest) XTtsAccessToken(xTtsAccessToken string) ApiPromotion202309ActivitiesSearchPostRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiPromotion202309ActivitiesSearchPostRequest) ContentType(contentType string) ApiPromotion202309ActivitiesSearchPostRequest {
    r.contentType = &contentType
    return r
}
// 
func (r ApiPromotion202309ActivitiesSearchPostRequest) ShopCipher(shopCipher string) ApiPromotion202309ActivitiesSearchPostRequest {
    r.shopCipher = &shopCipher
    return r
}
func (r ApiPromotion202309ActivitiesSearchPostRequest) Promotion202309SearchActivitiesRequestBody(promotion202309SearchActivitiesRequestBody promotion_v202309.Promotion202309SearchActivitiesRequestBody) ApiPromotion202309ActivitiesSearchPostRequest {
    r.promotion202309SearchActivitiesRequestBody = &promotion202309SearchActivitiesRequestBody
    return r
}
func (r ApiPromotion202309ActivitiesSearchPostRequest) Execute() (*promotion_v202309.Promotion202309SearchActivitiesResponse, *http.Response, error) {
    return r.ApiService.Promotion202309ActivitiesSearchPostExecute(r)
}

/*
Promotion202309ActivitiesSearchPost SearchActivities
Get a list of product discount or flash deal promotion activities. For coupon activities, use [Search Coupons](https://partner.tiktokshop.com/docv2/page/6699dcdf115ebe02f841e4cd).

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiPromotion202309ActivitiesSearchPostRequest
*/
func (a *PromotionV202309APIService) Promotion202309ActivitiesSearchPost(ctx context.Context) ApiPromotion202309ActivitiesSearchPostRequest {
    return ApiPromotion202309ActivitiesSearchPostRequest{
        ApiService: a,
        ctx: ctx,
    }
}

// Execute executes the request
//  @return Promotion202309SearchActivitiesResponse
func (a *PromotionV202309APIService) Promotion202309ActivitiesSearchPostExecute(r ApiPromotion202309ActivitiesSearchPostRequest) (*promotion_v202309.Promotion202309SearchActivitiesResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodPost
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *promotion_v202309.Promotion202309SearchActivitiesResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PromotionV202309APIService.Promotion202309ActivitiesSearchPost")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/promotion/202309/activities/search"

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    if r.shopCipher != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "shop_cipher", r.shopCipher, "")
    }
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{"application/json"}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    // body params
    localVarPostBody = r.promotion202309SearchActivitiesRequestBody
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}
