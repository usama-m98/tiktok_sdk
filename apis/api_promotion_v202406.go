/*
tiktok shop openapi

sdk for apis

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apis

import (
    "bytes"
    "context"
    "io"
    "net/http"
    "net/url"
    "strings"

    "tiktokshop/open/sdk_golang/models/promotion/v202406"
)


// PromotionV202406APIService PromotionV202406API service
type PromotionV202406APIService service

type ApiPromotion202406CouponsCouponIdGetRequest struct {
    ctx context.Context
    ApiService *PromotionV202406APIService
    couponId string
    xTtsAccessToken *string
    contentType *string
    shopCipher *string
}

// 
func (r ApiPromotion202406CouponsCouponIdGetRequest) XTtsAccessToken(xTtsAccessToken string) ApiPromotion202406CouponsCouponIdGetRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiPromotion202406CouponsCouponIdGetRequest) ContentType(contentType string) ApiPromotion202406CouponsCouponIdGetRequest {
    r.contentType = &contentType
    return r
}
// 
func (r ApiPromotion202406CouponsCouponIdGetRequest) ShopCipher(shopCipher string) ApiPromotion202406CouponsCouponIdGetRequest {
    r.shopCipher = &shopCipher
    return r
}
func (r ApiPromotion202406CouponsCouponIdGetRequest) Execute() (*promotion_v202406.Promotion202406GetCouponResponse, *http.Response, error) {
    return r.ApiService.Promotion202406CouponsCouponIdGetExecute(r)
}

/*
Promotion202406CouponsCouponIdGet GetCoupon
Use this API to get the full details of a coupon matching the {coupon_id}.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@param couponId Coupon id.
@return ApiPromotion202406CouponsCouponIdGetRequest
*/
func (a *PromotionV202406APIService) Promotion202406CouponsCouponIdGet(ctx context.Context, couponId string) ApiPromotion202406CouponsCouponIdGetRequest {
    return ApiPromotion202406CouponsCouponIdGetRequest{
        ApiService: a,
        ctx: ctx,
        couponId: couponId,
    }
}

// Execute executes the request
//  @return Promotion202406GetCouponResponse
func (a *PromotionV202406APIService) Promotion202406CouponsCouponIdGetExecute(r ApiPromotion202406CouponsCouponIdGetRequest) (*promotion_v202406.Promotion202406GetCouponResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodGet
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *promotion_v202406.Promotion202406GetCouponResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PromotionV202406APIService.Promotion202406CouponsCouponIdGet")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/promotion/202406/coupons/{coupon_id}"
    localVarPath = strings.Replace(localVarPath, "{"+"coupon_id"+"}", url.PathEscape(parameterValueToString(r.couponId, "couponId")), -1)

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    if r.shopCipher != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "shop_cipher", r.shopCipher, "")
    }
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPromotion202406CouponsSearchPostRequest struct {
    ctx context.Context
    ApiService *PromotionV202406APIService
    xTtsAccessToken *string
    contentType *string
    pageToken *string
    pageSize *int32
    shopCipher *string
    promotion202406SearchCouponsRequestBody *promotion_v202406.Promotion202406SearchCouponsRequestBody
}

// 
func (r ApiPromotion202406CouponsSearchPostRequest) XTtsAccessToken(xTtsAccessToken string) ApiPromotion202406CouponsSearchPostRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiPromotion202406CouponsSearchPostRequest) ContentType(contentType string) ApiPromotion202406CouponsSearchPostRequest {
    r.contentType = &contentType
    return r
}
// Page cursor. Omitting this parameter will return the first page of results.
func (r ApiPromotion202406CouponsSearchPostRequest) PageToken(pageToken string) ApiPromotion202406CouponsSearchPostRequest {
    r.pageToken = &pageToken
    return r
}
// The number of coupons returned in one page of results. The range is &#x60;[1, 100]&#x60;, with a default value of &#x60;50&#x60;.
func (r ApiPromotion202406CouponsSearchPostRequest) PageSize(pageSize int32) ApiPromotion202406CouponsSearchPostRequest {
    r.pageSize = &pageSize
    return r
}
// 
func (r ApiPromotion202406CouponsSearchPostRequest) ShopCipher(shopCipher string) ApiPromotion202406CouponsSearchPostRequest {
    r.shopCipher = &shopCipher
    return r
}
func (r ApiPromotion202406CouponsSearchPostRequest) Promotion202406SearchCouponsRequestBody(promotion202406SearchCouponsRequestBody promotion_v202406.Promotion202406SearchCouponsRequestBody) ApiPromotion202406CouponsSearchPostRequest {
    r.promotion202406SearchCouponsRequestBody = &promotion202406SearchCouponsRequestBody
    return r
}
func (r ApiPromotion202406CouponsSearchPostRequest) Execute() (*promotion_v202406.Promotion202406SearchCouponsResponse, *http.Response, error) {
    return r.ApiService.Promotion202406CouponsSearchPostExecute(r)
}

/*
Promotion202406CouponsSearchPost SearchCoupons
Use this API to get a list of coupons, narrowed down further based on search parameters. 
The coupons are created in Seller Center or Seller App.
For further details of the specific coupon, use `GET Coupon`.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiPromotion202406CouponsSearchPostRequest
*/
func (a *PromotionV202406APIService) Promotion202406CouponsSearchPost(ctx context.Context) ApiPromotion202406CouponsSearchPostRequest {
    return ApiPromotion202406CouponsSearchPostRequest{
        ApiService: a,
        ctx: ctx,
    }
}

// Execute executes the request
//  @return Promotion202406SearchCouponsResponse
func (a *PromotionV202406APIService) Promotion202406CouponsSearchPostExecute(r ApiPromotion202406CouponsSearchPostRequest) (*promotion_v202406.Promotion202406SearchCouponsResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodPost
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *promotion_v202406.Promotion202406SearchCouponsResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PromotionV202406APIService.Promotion202406CouponsSearchPost")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/promotion/202406/coupons/search"

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    if r.pageToken != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "page_token", r.pageToken, "")
    }
    if r.pageSize != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "")
    }
    if r.shopCipher != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "shop_cipher", r.shopCipher, "")
    }
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{"application/json"}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    // body params
    localVarPostBody = r.promotion202406SearchCouponsRequestBody
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}
