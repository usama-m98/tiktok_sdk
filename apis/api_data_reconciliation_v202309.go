/*
tiktok shop openapi

sdk for apis

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apis

import (
    "bytes"
    "context"
    "io"
    "net/http"
    "net/url"

    "tiktokshop/open/sdk_golang/models/data_reconciliation/v202309"
)


// DataReconciliationV202309APIService DataReconciliationV202309API service
type DataReconciliationV202309APIService service

type ApiDataReconciliation202309OrdersSyncPostRequest struct {
    ctx context.Context
    ApiService *DataReconciliationV202309APIService
    xTtsAccessToken *string
    contentType *string
    shopId *int64
    dataReconciliation202309OrderStatusDataExchangeRequestBody *data_reconciliation_v202309.DataReconciliation202309OrderStatusDataExchangeRequestBody
}

// 
func (r ApiDataReconciliation202309OrdersSyncPostRequest) XTtsAccessToken(xTtsAccessToken string) ApiDataReconciliation202309OrdersSyncPostRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiDataReconciliation202309OrdersSyncPostRequest) ContentType(contentType string) ApiDataReconciliation202309OrdersSyncPostRequest {
    r.contentType = &contentType
    return r
}
// Tiktok shop seller shop id.
func (r ApiDataReconciliation202309OrdersSyncPostRequest) ShopId(shopId int64) ApiDataReconciliation202309OrdersSyncPostRequest {
    r.shopId = &shopId
    return r
}
func (r ApiDataReconciliation202309OrdersSyncPostRequest) DataReconciliation202309OrderStatusDataExchangeRequestBody(dataReconciliation202309OrderStatusDataExchangeRequestBody data_reconciliation_v202309.DataReconciliation202309OrderStatusDataExchangeRequestBody) ApiDataReconciliation202309OrdersSyncPostRequest {
    r.dataReconciliation202309OrderStatusDataExchangeRequestBody = &dataReconciliation202309OrderStatusDataExchangeRequestBody
    return r
}
func (r ApiDataReconciliation202309OrdersSyncPostRequest) Execute() (*data_reconciliation_v202309.DataReconciliation202309OrderStatusDataExchangeResponse, *http.Response, error) {
    return r.ApiService.DataReconciliation202309OrdersSyncPostExecute(r)
}

/*
DataReconciliation202309OrdersSyncPost OrderStatusDataExchange
TikTok Shop-Connector exchange order data from DTC(Direct To Consumer) platform to Tiktok Shop-QE system to compare the order data of DTC platform and Tiktok Shop. Which systems of users are involved with the API? For example, DTC platform Connector App, Shipping App, WMS, PIM, Multi Channel App, etc.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiDataReconciliation202309OrdersSyncPostRequest
*/
func (a *DataReconciliationV202309APIService) DataReconciliation202309OrdersSyncPost(ctx context.Context) ApiDataReconciliation202309OrdersSyncPostRequest {
    return ApiDataReconciliation202309OrdersSyncPostRequest{
        ApiService: a,
        ctx: ctx,
    }
}

// Execute executes the request
//  @return DataReconciliation202309OrderStatusDataExchangeResponse
func (a *DataReconciliationV202309APIService) DataReconciliation202309OrdersSyncPostExecute(r ApiDataReconciliation202309OrdersSyncPostRequest) (*data_reconciliation_v202309.DataReconciliation202309OrderStatusDataExchangeResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodPost
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *data_reconciliation_v202309.DataReconciliation202309OrderStatusDataExchangeResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataReconciliationV202309APIService.DataReconciliation202309OrdersSyncPost")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/data_reconciliation/202309/orders/sync"

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    if r.shopId != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "shop_id", r.shopId, "")
    }
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{"application/json"}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    // body params
    localVarPostBody = r.dataReconciliation202309OrderStatusDataExchangeRequestBody
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}
