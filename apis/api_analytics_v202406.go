/*
tiktok shop openapi

sdk for apis

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apis

import (
    "bytes"
    "context"
    "io"
    "net/http"
    "net/url"
    "strings"

    "tiktokshop/open/sdk_golang/models/analytics/v202406"
)


// AnalyticsV202406APIService AnalyticsV202406API service
type AnalyticsV202406APIService service

type ApiAnalytics202406ShopSkusPerformanceGetRequest struct {
    ctx context.Context
    ApiService *AnalyticsV202406APIService
    startDateGe *string
    endDateLt *string
    xTtsAccessToken *string
    contentType *string
    pageSize *int64
    sortField *string
    sortOrder *string
    pageToken *string
    productId *string
    currency *string
    shopCipher *string
}

// Start time (ISO 8601 YYYY-MM-DD format) in shop registered timezone, inclusive.
func (r ApiAnalytics202406ShopSkusPerformanceGetRequest) StartDateGe(startDateGe string) ApiAnalytics202406ShopSkusPerformanceGetRequest {
    r.startDateGe = &startDateGe
    return r
}
// End time (ISO 8601 YYYY-MM-DD format) in shop registered timezone, exclusive.
func (r ApiAnalytics202406ShopSkusPerformanceGetRequest) EndDateLt(endDateLt string) ApiAnalytics202406ShopSkusPerformanceGetRequest {
    r.endDateLt = &endDateLt
    return r
}
// 
func (r ApiAnalytics202406ShopSkusPerformanceGetRequest) XTtsAccessToken(xTtsAccessToken string) ApiAnalytics202406ShopSkusPerformanceGetRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiAnalytics202406ShopSkusPerformanceGetRequest) ContentType(contentType string) ApiAnalytics202406ShopSkusPerformanceGetRequest {
    r.contentType = &contentType
    return r
}
// Number of records per page. The maximum page_size value is 100
func (r ApiAnalytics202406ShopSkusPerformanceGetRequest) PageSize(pageSize int64) ApiAnalytics202406ShopSkusPerformanceGetRequest {
    r.pageSize = &pageSize
    return r
}
// Sort field, possible values: -  gmv (default) - sku_orders - units_sold 
func (r ApiAnalytics202406ShopSkusPerformanceGetRequest) SortField(sortField string) ApiAnalytics202406ShopSkusPerformanceGetRequest {
    r.sortField = &sortField
    return r
}
// Sort direction, possible values: - DESC (default) - ASC
func (r ApiAnalytics202406ShopSkusPerformanceGetRequest) SortOrder(sortOrder string) ApiAnalytics202406ShopSkusPerformanceGetRequest {
    r.sortOrder = &sortOrder
    return r
}
// Page token, indicating the current position. The page_token is empty by default, indicating first position.
func (r ApiAnalytics202406ShopSkusPerformanceGetRequest) PageToken(pageToken string) ApiAnalytics202406ShopSkusPerformanceGetRequest {
    r.pageToken = &pageToken
    return r
}
// Filter SKUs by product ID. If a product_id is provided, the API will only return SKUs for the given product ID, otherwise it will return all SKUs for the shop
func (r ApiAnalytics202406ShopSkusPerformanceGetRequest) ProductId(productId string) ApiAnalytics202406ShopSkusPerformanceGetRequest {
    r.productId = &productId
    return r
}
// Currency: - USD: US dollars - LOCAL (default): Local currency where the shop is located
func (r ApiAnalytics202406ShopSkusPerformanceGetRequest) Currency(currency string) ApiAnalytics202406ShopSkusPerformanceGetRequest {
    r.currency = &currency
    return r
}
// 
func (r ApiAnalytics202406ShopSkusPerformanceGetRequest) ShopCipher(shopCipher string) ApiAnalytics202406ShopSkusPerformanceGetRequest {
    r.shopCipher = &shopCipher
    return r
}
func (r ApiAnalytics202406ShopSkusPerformanceGetRequest) Execute() (*analytics_v202406.Analytics202406GetShopSKUPerformanceListResponse, *http.Response, error) {
    return r.ApiService.Analytics202406ShopSkusPerformanceGetExecute(r)
}

/*
Analytics202406ShopSkusPerformanceGet GetShopSKUPerformanceList
Returns a list of SKU performance metrics. This API currently provides data only for shops registered in the United States, United Kingdom, Singapore, Vietnam, and Thailand.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiAnalytics202406ShopSkusPerformanceGetRequest
*/
func (a *AnalyticsV202406APIService) Analytics202406ShopSkusPerformanceGet(ctx context.Context) ApiAnalytics202406ShopSkusPerformanceGetRequest {
    return ApiAnalytics202406ShopSkusPerformanceGetRequest{
        ApiService: a,
        ctx: ctx,
    }
}

// Execute executes the request
//  @return Analytics202406GetShopSKUPerformanceListResponse
func (a *AnalyticsV202406APIService) Analytics202406ShopSkusPerformanceGetExecute(r ApiAnalytics202406ShopSkusPerformanceGetRequest) (*analytics_v202406.Analytics202406GetShopSKUPerformanceListResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodGet
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *analytics_v202406.Analytics202406GetShopSKUPerformanceListResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsV202406APIService.Analytics202406ShopSkusPerformanceGet")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/analytics/202406/shop_skus/performance"

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.startDateGe == nil {
        return localVarReturnValue, nil, reportError("startDateGe is required and must be specified")
    }
    if r.endDateLt == nil {
        return localVarReturnValue, nil, reportError("endDateLt is required and must be specified")
    }
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    parameterAddToHeaderOrQuery(localVarQueryParams, "start_date_ge", r.startDateGe, "")
    parameterAddToHeaderOrQuery(localVarQueryParams, "end_date_lt", r.endDateLt, "")
    if r.pageSize != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "")
    }
    if r.sortField != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "sort_field", r.sortField, "")
    }
    if r.sortOrder != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "sort_order", r.sortOrder, "")
    }
    if r.pageToken != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "page_token", r.pageToken, "")
    }
    if r.productId != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "product_id", r.productId, "")
    }
    if r.currency != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "currency", r.currency, "")
    }
    if r.shopCipher != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "shop_cipher", r.shopCipher, "")
    }
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAnalytics202406ShopSkusSkuIdPerformanceGetRequest struct {
    ctx context.Context
    ApiService *AnalyticsV202406APIService
    skuId string
    startDateGe *string
    endDateLt *string
    xTtsAccessToken *string
    contentType *string
    withComparison *bool
    granularity *string
    currency *string
    shopCipher *string
}

// Start time (ISO 8601 YYYY-MM-DD format) in shop registered timezone, inclusive.
func (r ApiAnalytics202406ShopSkusSkuIdPerformanceGetRequest) StartDateGe(startDateGe string) ApiAnalytics202406ShopSkusSkuIdPerformanceGetRequest {
    r.startDateGe = &startDateGe
    return r
}
// End time (ISO 8601 YYYY-MM-DD format) in shop registered timezone, exclusive.
func (r ApiAnalytics202406ShopSkusSkuIdPerformanceGetRequest) EndDateLt(endDateLt string) ApiAnalytics202406ShopSkusSkuIdPerformanceGetRequest {
    r.endDateLt = &endDateLt
    return r
}
// 
func (r ApiAnalytics202406ShopSkusSkuIdPerformanceGetRequest) XTtsAccessToken(xTtsAccessToken string) ApiAnalytics202406ShopSkusSkuIdPerformanceGetRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiAnalytics202406ShopSkusSkuIdPerformanceGetRequest) ContentType(contentType string) ApiAnalytics202406ShopSkusSkuIdPerformanceGetRequest {
    r.contentType = &contentType
    return r
}
// Whether previous period data is returned for comparison. true | false. Default value is false The previous period has the same length and granularity as the current period with end time being the same as the start time of the current period. Example: If start_date_ge &#x3D; 2024-04-01 and end_date_lt &#x3D; 2024-04-08, the previous period data will be from 2024-03-25 to 2024-04-01.
func (r ApiAnalytics202406ShopSkusSkuIdPerformanceGetRequest) WithComparison(withComparison bool) ApiAnalytics202406ShopSkusSkuIdPerformanceGetRequest {
    r.withComparison = &withComparison
    return r
}
// Granularity of the data. Available values: ALL, 1D Default value: ALL * ALL: aggregate * 1D: daily
func (r ApiAnalytics202406ShopSkusSkuIdPerformanceGetRequest) Granularity(granularity string) ApiAnalytics202406ShopSkusSkuIdPerformanceGetRequest {
    r.granularity = &granularity
    return r
}
// Currency: - USD: US dollars - LOCAL (default): Local currency where the shop is located
func (r ApiAnalytics202406ShopSkusSkuIdPerformanceGetRequest) Currency(currency string) ApiAnalytics202406ShopSkusSkuIdPerformanceGetRequest {
    r.currency = &currency
    return r
}
// 
func (r ApiAnalytics202406ShopSkusSkuIdPerformanceGetRequest) ShopCipher(shopCipher string) ApiAnalytics202406ShopSkusSkuIdPerformanceGetRequest {
    r.shopCipher = &shopCipher
    return r
}
func (r ApiAnalytics202406ShopSkusSkuIdPerformanceGetRequest) Execute() (*analytics_v202406.Analytics202406GetShopSKUPerformanceResponse, *http.Response, error) {
    return r.ApiService.Analytics202406ShopSkusSkuIdPerformanceGetExecute(r)
}

/*
Analytics202406ShopSkusSkuIdPerformanceGet GetShopSKUPerformance
Return SKU performance metrics. This API currently provides data only for shops registered in the United States, United Kingdom, Singapore, Vietnam, and Thailand.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@param skuId 
@return ApiAnalytics202406ShopSkusSkuIdPerformanceGetRequest
*/
func (a *AnalyticsV202406APIService) Analytics202406ShopSkusSkuIdPerformanceGet(ctx context.Context, skuId string) ApiAnalytics202406ShopSkusSkuIdPerformanceGetRequest {
    return ApiAnalytics202406ShopSkusSkuIdPerformanceGetRequest{
        ApiService: a,
        ctx: ctx,
        skuId: skuId,
    }
}

// Execute executes the request
//  @return Analytics202406GetShopSKUPerformanceResponse
func (a *AnalyticsV202406APIService) Analytics202406ShopSkusSkuIdPerformanceGetExecute(r ApiAnalytics202406ShopSkusSkuIdPerformanceGetRequest) (*analytics_v202406.Analytics202406GetShopSKUPerformanceResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodGet
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *analytics_v202406.Analytics202406GetShopSKUPerformanceResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsV202406APIService.Analytics202406ShopSkusSkuIdPerformanceGet")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/analytics/202406/shop_skus/{sku_id}/performance"
    localVarPath = strings.Replace(localVarPath, "{"+"sku_id"+"}", url.PathEscape(parameterValueToString(r.skuId, "skuId")), -1)

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.startDateGe == nil {
        return localVarReturnValue, nil, reportError("startDateGe is required and must be specified")
    }
    if r.endDateLt == nil {
        return localVarReturnValue, nil, reportError("endDateLt is required and must be specified")
    }
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    parameterAddToHeaderOrQuery(localVarQueryParams, "start_date_ge", r.startDateGe, "")
    parameterAddToHeaderOrQuery(localVarQueryParams, "end_date_lt", r.endDateLt, "")
    if r.withComparison != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "with_comparison", r.withComparison, "")
    }
    if r.granularity != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "granularity", r.granularity, "")
    }
    if r.currency != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "currency", r.currency, "")
    }
    if r.shopCipher != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "shop_cipher", r.shopCipher, "")
    }
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}
