/*
tiktok shop openapi

sdk for apis

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apis

import (
    "bytes"
    "context"
    "io"
    "net/http"
    "net/url"

    "tiktokshop/open/sdk_golang/models/fbt/v202410"
)


// FbtV202410APIService FbtV202410API service
type FbtV202410APIService service

type ApiFbt202410InventoryRecordsSearchPostRequest struct {
    ctx context.Context
    ApiService *FbtV202410APIService
    pageSize *int32
    xTtsAccessToken *string
    contentType *string
    pageToken *string
    shopCipher *string
    fbt202410SearchFBTInventoryRecordRequestBody *fbt_v202410.Fbt202410SearchFBTInventoryRecordRequestBody
}

// The number of results to be returned per page.  Valid range: [1-100].
func (r ApiFbt202410InventoryRecordsSearchPostRequest) PageSize(pageSize int32) ApiFbt202410InventoryRecordsSearchPostRequest {
    r.pageSize = &pageSize
    return r
}
// 
func (r ApiFbt202410InventoryRecordsSearchPostRequest) XTtsAccessToken(xTtsAccessToken string) ApiFbt202410InventoryRecordsSearchPostRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiFbt202410InventoryRecordsSearchPostRequest) ContentType(contentType string) ApiFbt202410InventoryRecordsSearchPostRequest {
    r.contentType = &contentType
    return r
}
// Pagination page token. It should be empty for the first page.
func (r ApiFbt202410InventoryRecordsSearchPostRequest) PageToken(pageToken string) ApiFbt202410InventoryRecordsSearchPostRequest {
    r.pageToken = &pageToken
    return r
}
// 
func (r ApiFbt202410InventoryRecordsSearchPostRequest) ShopCipher(shopCipher string) ApiFbt202410InventoryRecordsSearchPostRequest {
    r.shopCipher = &shopCipher
    return r
}
func (r ApiFbt202410InventoryRecordsSearchPostRequest) Fbt202410SearchFBTInventoryRecordRequestBody(fbt202410SearchFBTInventoryRecordRequestBody fbt_v202410.Fbt202410SearchFBTInventoryRecordRequestBody) ApiFbt202410InventoryRecordsSearchPostRequest {
    r.fbt202410SearchFBTInventoryRecordRequestBody = &fbt202410SearchFBTInventoryRecordRequestBody
    return r
}
func (r ApiFbt202410InventoryRecordsSearchPostRequest) Execute() (*fbt_v202410.Fbt202410SearchFBTInventoryRecordResponse, *http.Response, error) {
    return r.ApiService.Fbt202410InventoryRecordsSearchPostExecute(r)
}

/*
Fbt202410InventoryRecordsSearchPost SearchFBTInventoryRecord
This API is used to retrieve detailed inventory change records for goods at the warehouse level.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiFbt202410InventoryRecordsSearchPostRequest
*/
func (a *FbtV202410APIService) Fbt202410InventoryRecordsSearchPost(ctx context.Context) ApiFbt202410InventoryRecordsSearchPostRequest {
    return ApiFbt202410InventoryRecordsSearchPostRequest{
        ApiService: a,
        ctx: ctx,
    }
}

// Execute executes the request
//  @return Fbt202410SearchFBTInventoryRecordResponse
func (a *FbtV202410APIService) Fbt202410InventoryRecordsSearchPostExecute(r ApiFbt202410InventoryRecordsSearchPostRequest) (*fbt_v202410.Fbt202410SearchFBTInventoryRecordResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodPost
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *fbt_v202410.Fbt202410SearchFBTInventoryRecordResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FbtV202410APIService.Fbt202410InventoryRecordsSearchPost")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/fbt/202410/inventory_records/search"

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.pageSize == nil {
        return localVarReturnValue, nil, reportError("pageSize is required and must be specified")
    }
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "")
    if r.pageToken != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "page_token", r.pageToken, "")
    }
    if r.shopCipher != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "shop_cipher", r.shopCipher, "")
    }
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{"application/json"}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    // body params
    localVarPostBody = r.fbt202410SearchFBTInventoryRecordRequestBody
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}
