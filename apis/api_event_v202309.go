/*
tiktok shop openapi

sdk for apis

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apis

import (
    "bytes"
    "context"
    "io"
    "net/http"
    "net/url"

    "tiktokshop/open/sdk_golang/models/event/v202309"
)


// EventV202309APIService EventV202309API service
type EventV202309APIService service

type ApiEvent202309WebhooksDeleteRequest struct {
    ctx context.Context
    ApiService *EventV202309APIService
    xTtsAccessToken *string
    contentType *string
    shopCipher *string
    event202309DeleteShopWebhookRequestBody *event_v202309.Event202309DeleteShopWebhookRequestBody
}

// 
func (r ApiEvent202309WebhooksDeleteRequest) XTtsAccessToken(xTtsAccessToken string) ApiEvent202309WebhooksDeleteRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiEvent202309WebhooksDeleteRequest) ContentType(contentType string) ApiEvent202309WebhooksDeleteRequest {
    r.contentType = &contentType
    return r
}
// 
func (r ApiEvent202309WebhooksDeleteRequest) ShopCipher(shopCipher string) ApiEvent202309WebhooksDeleteRequest {
    r.shopCipher = &shopCipher
    return r
}
func (r ApiEvent202309WebhooksDeleteRequest) Event202309DeleteShopWebhookRequestBody(event202309DeleteShopWebhookRequestBody event_v202309.Event202309DeleteShopWebhookRequestBody) ApiEvent202309WebhooksDeleteRequest {
    r.event202309DeleteShopWebhookRequestBody = &event202309DeleteShopWebhookRequestBody
    return r
}
func (r ApiEvent202309WebhooksDeleteRequest) Execute() (*event_v202309.Event202309DeleteShopWebhookResponse, *http.Response, error) {
    return r.ApiService.Event202309WebhooksDeleteExecute(r)
}

/*
Event202309WebhooksDelete DeleteShopWebhook
Deletes the shop's webhook URL for a specific event topic. 
Regardless of whether webhook is configured or not, the result will return success.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiEvent202309WebhooksDeleteRequest
*/
func (a *EventV202309APIService) Event202309WebhooksDelete(ctx context.Context) ApiEvent202309WebhooksDeleteRequest {
    return ApiEvent202309WebhooksDeleteRequest{
        ApiService: a,
        ctx: ctx,
    }
}

// Execute executes the request
//  @return Event202309DeleteShopWebhookResponse
func (a *EventV202309APIService) Event202309WebhooksDeleteExecute(r ApiEvent202309WebhooksDeleteRequest) (*event_v202309.Event202309DeleteShopWebhookResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodDelete
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *event_v202309.Event202309DeleteShopWebhookResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventV202309APIService.Event202309WebhooksDelete")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/event/202309/webhooks"

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    if r.shopCipher != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "shop_cipher", r.shopCipher, "")
    }
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{"application/json"}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    // body params
    localVarPostBody = r.event202309DeleteShopWebhookRequestBody
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEvent202309WebhooksGetRequest struct {
    ctx context.Context
    ApiService *EventV202309APIService
    xTtsAccessToken *string
    contentType *string
    shopCipher *string
}

// 
func (r ApiEvent202309WebhooksGetRequest) XTtsAccessToken(xTtsAccessToken string) ApiEvent202309WebhooksGetRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiEvent202309WebhooksGetRequest) ContentType(contentType string) ApiEvent202309WebhooksGetRequest {
    r.contentType = &contentType
    return r
}
// 
func (r ApiEvent202309WebhooksGetRequest) ShopCipher(shopCipher string) ApiEvent202309WebhooksGetRequest {
    r.shopCipher = &shopCipher
    return r
}
func (r ApiEvent202309WebhooksGetRequest) Execute() (*event_v202309.Event202309GetShopWebhooksResponse, *http.Response, error) {
    return r.ApiService.Event202309WebhooksGetExecute(r)
}

/*
Event202309WebhooksGet GetShopWebhooks
Retrieves a shop's webhooks and the corresponding webhook URLs.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiEvent202309WebhooksGetRequest
*/
func (a *EventV202309APIService) Event202309WebhooksGet(ctx context.Context) ApiEvent202309WebhooksGetRequest {
    return ApiEvent202309WebhooksGetRequest{
        ApiService: a,
        ctx: ctx,
    }
}

// Execute executes the request
//  @return Event202309GetShopWebhooksResponse
func (a *EventV202309APIService) Event202309WebhooksGetExecute(r ApiEvent202309WebhooksGetRequest) (*event_v202309.Event202309GetShopWebhooksResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodGet
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *event_v202309.Event202309GetShopWebhooksResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventV202309APIService.Event202309WebhooksGet")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/event/202309/webhooks"

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    if r.shopCipher != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "shop_cipher", r.shopCipher, "")
    }
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEvent202309WebhooksPutRequest struct {
    ctx context.Context
    ApiService *EventV202309APIService
    xTtsAccessToken *string
    contentType *string
    shopCipher *string
    event202309UpdateShopWebhookRequestBody *event_v202309.Event202309UpdateShopWebhookRequestBody
}

// 
func (r ApiEvent202309WebhooksPutRequest) XTtsAccessToken(xTtsAccessToken string) ApiEvent202309WebhooksPutRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiEvent202309WebhooksPutRequest) ContentType(contentType string) ApiEvent202309WebhooksPutRequest {
    r.contentType = &contentType
    return r
}
// 
func (r ApiEvent202309WebhooksPutRequest) ShopCipher(shopCipher string) ApiEvent202309WebhooksPutRequest {
    r.shopCipher = &shopCipher
    return r
}
func (r ApiEvent202309WebhooksPutRequest) Event202309UpdateShopWebhookRequestBody(event202309UpdateShopWebhookRequestBody event_v202309.Event202309UpdateShopWebhookRequestBody) ApiEvent202309WebhooksPutRequest {
    r.event202309UpdateShopWebhookRequestBody = &event202309UpdateShopWebhookRequestBody
    return r
}
func (r ApiEvent202309WebhooksPutRequest) Execute() (*event_v202309.Event202309UpdateShopWebhookResponse, *http.Response, error) {
    return r.ApiService.Event202309WebhooksPutExecute(r)
}

/*
Event202309WebhooksPut UpdateShopWebhook
Updates the shop's webhook URL for a specific event topic.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiEvent202309WebhooksPutRequest
*/
func (a *EventV202309APIService) Event202309WebhooksPut(ctx context.Context) ApiEvent202309WebhooksPutRequest {
    return ApiEvent202309WebhooksPutRequest{
        ApiService: a,
        ctx: ctx,
    }
}

// Execute executes the request
//  @return Event202309UpdateShopWebhookResponse
func (a *EventV202309APIService) Event202309WebhooksPutExecute(r ApiEvent202309WebhooksPutRequest) (*event_v202309.Event202309UpdateShopWebhookResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodPut
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *event_v202309.Event202309UpdateShopWebhookResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventV202309APIService.Event202309WebhooksPut")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/event/202309/webhooks"

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    if r.shopCipher != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "shop_cipher", r.shopCipher, "")
    }
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{"application/json"}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    // body params
    localVarPostBody = r.event202309UpdateShopWebhookRequestBody
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}
