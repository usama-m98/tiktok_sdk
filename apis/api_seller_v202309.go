/*
tiktok shop openapi

sdk for apis

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apis

import (
    "bytes"
    "context"
    "io"
    "net/http"
    "net/url"

    "tiktokshop/open/sdk_golang/models/seller/v202309"
)


// SellerV202309APIService SellerV202309API service
type SellerV202309APIService service

type ApiSeller202309PermissionsGetRequest struct {
    ctx context.Context
    ApiService *SellerV202309APIService
    xTtsAccessToken *string
    contentType *string
}

// 
func (r ApiSeller202309PermissionsGetRequest) XTtsAccessToken(xTtsAccessToken string) ApiSeller202309PermissionsGetRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiSeller202309PermissionsGetRequest) ContentType(contentType string) ApiSeller202309PermissionsGetRequest {
    r.contentType = &contentType
    return r
}
func (r ApiSeller202309PermissionsGetRequest) Execute() (*seller_v202309.Seller202309GetSellerPermissionsResponse, *http.Response, error) {
    return r.ApiService.Seller202309PermissionsGetExecute(r)
}

/*
Seller202309PermissionsGet GetSellerPermissions
Retrieves the cross-border operations that a cross-border seller is permitted to perform.
You can use this API prior to listing products to check whether a seller has the ability to list global products.
Target seller: Cross-border sellers

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiSeller202309PermissionsGetRequest
*/
func (a *SellerV202309APIService) Seller202309PermissionsGet(ctx context.Context) ApiSeller202309PermissionsGetRequest {
    return ApiSeller202309PermissionsGetRequest{
        ApiService: a,
        ctx: ctx,
    }
}

// Execute executes the request
//  @return Seller202309GetSellerPermissionsResponse
func (a *SellerV202309APIService) Seller202309PermissionsGetExecute(r ApiSeller202309PermissionsGetRequest) (*seller_v202309.Seller202309GetSellerPermissionsResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodGet
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *seller_v202309.Seller202309GetSellerPermissionsResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SellerV202309APIService.Seller202309PermissionsGet")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/seller/202309/permissions"

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSeller202309ShopsGetRequest struct {
    ctx context.Context
    ApiService *SellerV202309APIService
    xTtsAccessToken *string
    contentType *string
}

// 
func (r ApiSeller202309ShopsGetRequest) XTtsAccessToken(xTtsAccessToken string) ApiSeller202309ShopsGetRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiSeller202309ShopsGetRequest) ContentType(contentType string) ApiSeller202309ShopsGetRequest {
    r.contentType = &contentType
    return r
}
func (r ApiSeller202309ShopsGetRequest) Execute() (*seller_v202309.Seller202309GetActiveShopsResponse, *http.Response, error) {
    return r.ApiService.Seller202309ShopsGetExecute(r)
}

/*
Seller202309ShopsGet GetActiveShops
Retrieves all active shops that belong to a seller. 
You can use this API to check the activation status of shops.
Target seller: All

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiSeller202309ShopsGetRequest
*/
func (a *SellerV202309APIService) Seller202309ShopsGet(ctx context.Context) ApiSeller202309ShopsGetRequest {
    return ApiSeller202309ShopsGetRequest{
        ApiService: a,
        ctx: ctx,
    }
}

// Execute executes the request
//  @return Seller202309GetActiveShopsResponse
func (a *SellerV202309APIService) Seller202309ShopsGetExecute(r ApiSeller202309ShopsGetRequest) (*seller_v202309.Seller202309GetActiveShopsResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodGet
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *seller_v202309.Seller202309GetActiveShopsResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SellerV202309APIService.Seller202309ShopsGet")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/seller/202309/shops"

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}
