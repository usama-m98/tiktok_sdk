/*
tiktok shop openapi

sdk for apis

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apis

import (
    "bytes"
    "context"
    "io"
    "net/http"
    "net/url"

    "tiktokshop/open/sdk_golang/models/authorization/v202401"
)


// AuthorizationV202401APIService AuthorizationV202401API service
type AuthorizationV202401APIService service

type ApiAuthorization202401WidgetTokenGetRequest struct {
    ctx context.Context
    ApiService *AuthorizationV202401APIService
    xTtsAccessToken *string
    contentType *string
    shopId *int64
}

// 
func (r ApiAuthorization202401WidgetTokenGetRequest) XTtsAccessToken(xTtsAccessToken string) ApiAuthorization202401WidgetTokenGetRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiAuthorization202401WidgetTokenGetRequest) ContentType(contentType string) ApiAuthorization202401WidgetTokenGetRequest {
    r.contentType = &contentType
    return r
}
// shopID is not needed
func (r ApiAuthorization202401WidgetTokenGetRequest) ShopId(shopId int64) ApiAuthorization202401WidgetTokenGetRequest {
    r.shopId = &shopId
    return r
}
func (r ApiAuthorization202401WidgetTokenGetRequest) Execute() (*authorization_v202401.Authorization202401GetWidgetTokenResponse, *http.Response, error) {
    return r.ApiService.Authorization202401WidgetTokenGetExecute(r)
}

/*
Authorization202401WidgetTokenGet GetWidgetToken
this open api is used to generate a widget token   

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiAuthorization202401WidgetTokenGetRequest
*/
func (a *AuthorizationV202401APIService) Authorization202401WidgetTokenGet(ctx context.Context) ApiAuthorization202401WidgetTokenGetRequest {
    return ApiAuthorization202401WidgetTokenGetRequest{
        ApiService: a,
        ctx: ctx,
    }
}

// Execute executes the request
//  @return Authorization202401GetWidgetTokenResponse
func (a *AuthorizationV202401APIService) Authorization202401WidgetTokenGetExecute(r ApiAuthorization202401WidgetTokenGetRequest) (*authorization_v202401.Authorization202401GetWidgetTokenResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodGet
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *authorization_v202401.Authorization202401GetWidgetTokenResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthorizationV202401APIService.Authorization202401WidgetTokenGet")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/authorization/202401/widget_token"

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    if r.shopId != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "shop_id", r.shopId, "")
    }
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}
