/*
tiktok shop openapi

sdk for apis

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apis

import (
    "bytes"
    "context"
    "io"
    "net/http"
    "net/url"
    "strings"

    "tiktokshop/open/sdk_golang/models/analytics/v202405"
)


// AnalyticsV202405APIService AnalyticsV202405API service
type AnalyticsV202405APIService service

type ApiAnalytics202405ShopPerformanceGetRequest struct {
    ctx context.Context
    ApiService *AnalyticsV202405APIService
    startDateGe *string
    endDateLt *string
    xTtsAccessToken *string
    contentType *string
    withComparison *bool
    granularity *string
    currency *string
    shopCipher *string
}

// Start date (ISO 8601 YYYY-MM-DD format) in shop registered timezone. In the parameter name, \&quot;ge\&quot; refers to \&quot;greater than or equal to\&quot; (inclusive)
func (r ApiAnalytics202405ShopPerformanceGetRequest) StartDateGe(startDateGe string) ApiAnalytics202405ShopPerformanceGetRequest {
    r.startDateGe = &startDateGe
    return r
}
// End date (ISO 8601 YYYY-MM-DD format) in shop registered timezone. In the parameter name, \&quot;lt\&quot; refers to \&quot;less than\&quot; (exclusive)
func (r ApiAnalytics202405ShopPerformanceGetRequest) EndDateLt(endDateLt string) ApiAnalytics202405ShopPerformanceGetRequest {
    r.endDateLt = &endDateLt
    return r
}
// 
func (r ApiAnalytics202405ShopPerformanceGetRequest) XTtsAccessToken(xTtsAccessToken string) ApiAnalytics202405ShopPerformanceGetRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiAnalytics202405ShopPerformanceGetRequest) ContentType(contentType string) ApiAnalytics202405ShopPerformanceGetRequest {
    r.contentType = &contentType
    return r
}
// Whether previous period data is returned for comparison. Available values: true, false Default value: false The previous period has the same length and granularity as the current period with end time being the same as the start time of the current period. Example: If start_time_ge &#x3D; 2024-04-01 and end_time_lt &#x3D; 2024-04-08, the previous period data will be from 2024-03-25 to 2024-04-01.
func (r ApiAnalytics202405ShopPerformanceGetRequest) WithComparison(withComparison bool) ApiAnalytics202405ShopPerformanceGetRequest {
    r.withComparison = &withComparison
    return r
}
// Granularity of the data. Available values: ALL, 1D Default value: ALL * ALL: aggregate * 1D: daily
func (r ApiAnalytics202405ShopPerformanceGetRequest) Granularity(granularity string) ApiAnalytics202405ShopPerformanceGetRequest {
    r.granularity = &granularity
    return r
}
// Currency. Available values: USD, LOCAL Default value: LOCAL * USD: US dollars * LOCAL: local currency where the shop is located
func (r ApiAnalytics202405ShopPerformanceGetRequest) Currency(currency string) ApiAnalytics202405ShopPerformanceGetRequest {
    r.currency = &currency
    return r
}
// 
func (r ApiAnalytics202405ShopPerformanceGetRequest) ShopCipher(shopCipher string) ApiAnalytics202405ShopPerformanceGetRequest {
    r.shopCipher = &shopCipher
    return r
}
func (r ApiAnalytics202405ShopPerformanceGetRequest) Execute() (*analytics_v202405.Analytics202405GetShopPerformanceResponse, *http.Response, error) {
    return r.ApiService.Analytics202405ShopPerformanceGetExecute(r)
}

/*
Analytics202405ShopPerformanceGet GetShopPerformance
Returns performance metrics at shop/seller level. This API currently provides data only for shops registered in the United States, United Kingdom, Singapore, Vietnam, and Thailand.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiAnalytics202405ShopPerformanceGetRequest
*/
func (a *AnalyticsV202405APIService) Analytics202405ShopPerformanceGet(ctx context.Context) ApiAnalytics202405ShopPerformanceGetRequest {
    return ApiAnalytics202405ShopPerformanceGetRequest{
        ApiService: a,
        ctx: ctx,
    }
}

// Execute executes the request
//  @return Analytics202405GetShopPerformanceResponse
func (a *AnalyticsV202405APIService) Analytics202405ShopPerformanceGetExecute(r ApiAnalytics202405ShopPerformanceGetRequest) (*analytics_v202405.Analytics202405GetShopPerformanceResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodGet
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *analytics_v202405.Analytics202405GetShopPerformanceResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsV202405APIService.Analytics202405ShopPerformanceGet")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/analytics/202405/shop/performance"

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.startDateGe == nil {
        return localVarReturnValue, nil, reportError("startDateGe is required and must be specified")
    }
    if r.endDateLt == nil {
        return localVarReturnValue, nil, reportError("endDateLt is required and must be specified")
    }
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    parameterAddToHeaderOrQuery(localVarQueryParams, "start_date_ge", r.startDateGe, "")
    parameterAddToHeaderOrQuery(localVarQueryParams, "end_date_lt", r.endDateLt, "")
    if r.withComparison != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "with_comparison", r.withComparison, "")
    }
    if r.granularity != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "granularity", r.granularity, "")
    }
    if r.currency != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "currency", r.currency, "")
    }
    if r.shopCipher != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "shop_cipher", r.shopCipher, "")
    }
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAnalytics202405ShopProductsPerformanceGetRequest struct {
    ctx context.Context
    ApiService *AnalyticsV202405APIService
    startDateGe *string
    endDateLt *string
    xTtsAccessToken *string
    contentType *string
    pageSize *int64
    sortField *string
    sortOrder *string
    currency *string
    pageToken *string
    shopCipher *string
}

// Start date (ISO 8601 YYYY-MM-DD format) in shop registered timezone. In the parameter name, \&quot;ge\&quot; refers to \&quot;greater than or equal to\&quot; (inclusive)
func (r ApiAnalytics202405ShopProductsPerformanceGetRequest) StartDateGe(startDateGe string) ApiAnalytics202405ShopProductsPerformanceGetRequest {
    r.startDateGe = &startDateGe
    return r
}
// End date (ISO 8601 YYYY-MM-DD format) in shop registered timezone. In the parameter name, \&quot;lt\&quot; refers to \&quot;less than\&quot; (exclusive)
func (r ApiAnalytics202405ShopProductsPerformanceGetRequest) EndDateLt(endDateLt string) ApiAnalytics202405ShopProductsPerformanceGetRequest {
    r.endDateLt = &endDateLt
    return r
}
// 
func (r ApiAnalytics202405ShopProductsPerformanceGetRequest) XTtsAccessToken(xTtsAccessToken string) ApiAnalytics202405ShopProductsPerformanceGetRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiAnalytics202405ShopProductsPerformanceGetRequest) ContentType(contentType string) ApiAnalytics202405ShopProductsPerformanceGetRequest {
    r.contentType = &contentType
    return r
}
// Number of products per page. Max value: 100 Default value: 10
func (r ApiAnalytics202405ShopProductsPerformanceGetRequest) PageSize(pageSize int64) ApiAnalytics202405ShopProductsPerformanceGetRequest {
    r.pageSize = &pageSize
    return r
}
// Sort on. Available values: gmv, order_count, unit_sold_count, click_through_rate Default value: gmv
func (r ApiAnalytics202405ShopProductsPerformanceGetRequest) SortField(sortField string) ApiAnalytics202405ShopProductsPerformanceGetRequest {
    r.sortField = &sortField
    return r
}
// Sort direction. Available values: ASC, DESC Default value: DESC * ASC: ascending * DESC: descending
func (r ApiAnalytics202405ShopProductsPerformanceGetRequest) SortOrder(sortOrder string) ApiAnalytics202405ShopProductsPerformanceGetRequest {
    r.sortOrder = &sortOrder
    return r
}
// Currency. Available values: USD, LOCAL Default value: LOCAL * USD: US dollars * LOCAL: local currency where the shop is located
func (r ApiAnalytics202405ShopProductsPerformanceGetRequest) Currency(currency string) ApiAnalytics202405ShopProductsPerformanceGetRequest {
    r.currency = &currency
    return r
}
// Page token, indicating the current position. Used for requesting next page data. Leave this field empty for first time queries.
func (r ApiAnalytics202405ShopProductsPerformanceGetRequest) PageToken(pageToken string) ApiAnalytics202405ShopProductsPerformanceGetRequest {
    r.pageToken = &pageToken
    return r
}
// 
func (r ApiAnalytics202405ShopProductsPerformanceGetRequest) ShopCipher(shopCipher string) ApiAnalytics202405ShopProductsPerformanceGetRequest {
    r.shopCipher = &shopCipher
    return r
}
func (r ApiAnalytics202405ShopProductsPerformanceGetRequest) Execute() (*analytics_v202405.Analytics202405GetShopProductPerformanceListResponse, *http.Response, error) {
    return r.ApiService.Analytics202405ShopProductsPerformanceGetExecute(r)
}

/*
Analytics202405ShopProductsPerformanceGet GetShopProductPerformanceList
Returns a list of product performance metrics. This API currently provides data only for shops registered in the United States, United Kingdom, Singapore, Vietnam, and Thailand.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiAnalytics202405ShopProductsPerformanceGetRequest
*/
func (a *AnalyticsV202405APIService) Analytics202405ShopProductsPerformanceGet(ctx context.Context) ApiAnalytics202405ShopProductsPerformanceGetRequest {
    return ApiAnalytics202405ShopProductsPerformanceGetRequest{
        ApiService: a,
        ctx: ctx,
    }
}

// Execute executes the request
//  @return Analytics202405GetShopProductPerformanceListResponse
func (a *AnalyticsV202405APIService) Analytics202405ShopProductsPerformanceGetExecute(r ApiAnalytics202405ShopProductsPerformanceGetRequest) (*analytics_v202405.Analytics202405GetShopProductPerformanceListResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodGet
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *analytics_v202405.Analytics202405GetShopProductPerformanceListResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsV202405APIService.Analytics202405ShopProductsPerformanceGet")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/analytics/202405/shop_products/performance"

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.startDateGe == nil {
        return localVarReturnValue, nil, reportError("startDateGe is required and must be specified")
    }
    if r.endDateLt == nil {
        return localVarReturnValue, nil, reportError("endDateLt is required and must be specified")
    }
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    parameterAddToHeaderOrQuery(localVarQueryParams, "start_date_ge", r.startDateGe, "")
    parameterAddToHeaderOrQuery(localVarQueryParams, "end_date_lt", r.endDateLt, "")
    if r.pageSize != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "")
    }
    if r.sortField != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "sort_field", r.sortField, "")
    }
    if r.sortOrder != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "sort_order", r.sortOrder, "")
    }
    if r.currency != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "currency", r.currency, "")
    }
    if r.pageToken != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "page_token", r.pageToken, "")
    }
    if r.shopCipher != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "shop_cipher", r.shopCipher, "")
    }
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAnalytics202405ShopProductsProductIdPerformanceGetRequest struct {
    ctx context.Context
    ApiService *AnalyticsV202405APIService
    productId string
    startDateGe *string
    endDateLt *string
    xTtsAccessToken *string
    contentType *string
    withComparison *bool
    granularity *string
    currency *string
    shopCipher *string
}

// Start date (ISO 8601 YYYY-MM-DD format) in shop registered timezone. In the parameter name, \&quot;ge\&quot; refers to \&quot;greater than or equal to\&quot; (inclusive)
func (r ApiAnalytics202405ShopProductsProductIdPerformanceGetRequest) StartDateGe(startDateGe string) ApiAnalytics202405ShopProductsProductIdPerformanceGetRequest {
    r.startDateGe = &startDateGe
    return r
}
// End date (ISO 8601 YYYY-MM-DD format) in shop registered timezone. In the parameter name, \&quot;lt\&quot; refers to \&quot;less than\&quot; (exclusive)
func (r ApiAnalytics202405ShopProductsProductIdPerformanceGetRequest) EndDateLt(endDateLt string) ApiAnalytics202405ShopProductsProductIdPerformanceGetRequest {
    r.endDateLt = &endDateLt
    return r
}
// 
func (r ApiAnalytics202405ShopProductsProductIdPerformanceGetRequest) XTtsAccessToken(xTtsAccessToken string) ApiAnalytics202405ShopProductsProductIdPerformanceGetRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiAnalytics202405ShopProductsProductIdPerformanceGetRequest) ContentType(contentType string) ApiAnalytics202405ShopProductsProductIdPerformanceGetRequest {
    r.contentType = &contentType
    return r
}
// Whether previous period data is returned for comparison. Available values: true, false Default value: false The previous period has the same length and granularity as the current period with end time being the same as the start time of the current period. Example: If start_time_ge &#x3D; 2024-04-01 and end_time_lt &#x3D; 2024-04-08, the previous period data will be from 2024-03-25 to 2024-04-01.
func (r ApiAnalytics202405ShopProductsProductIdPerformanceGetRequest) WithComparison(withComparison bool) ApiAnalytics202405ShopProductsProductIdPerformanceGetRequest {
    r.withComparison = &withComparison
    return r
}
// Granularity of the data. Available values: ALL, 1D Default value: ALL * ALL: aggregate * 1D: daily
func (r ApiAnalytics202405ShopProductsProductIdPerformanceGetRequest) Granularity(granularity string) ApiAnalytics202405ShopProductsProductIdPerformanceGetRequest {
    r.granularity = &granularity
    return r
}
// Currency. Available values: USD, LOCAL Default value: LOCAL * USD: US dollars * LOCAL: local currency where the shop is located
func (r ApiAnalytics202405ShopProductsProductIdPerformanceGetRequest) Currency(currency string) ApiAnalytics202405ShopProductsProductIdPerformanceGetRequest {
    r.currency = &currency
    return r
}
// 
func (r ApiAnalytics202405ShopProductsProductIdPerformanceGetRequest) ShopCipher(shopCipher string) ApiAnalytics202405ShopProductsProductIdPerformanceGetRequest {
    r.shopCipher = &shopCipher
    return r
}
func (r ApiAnalytics202405ShopProductsProductIdPerformanceGetRequest) Execute() (*analytics_v202405.Analytics202405GetShopProductPerformanceResponse, *http.Response, error) {
    return r.ApiService.Analytics202405ShopProductsProductIdPerformanceGetExecute(r)
}

/*
Analytics202405ShopProductsProductIdPerformanceGet GetShopProductPerformance
Returns performance metrics for a product. This API currently provides data only for shops registered in the United States, United Kingdom, Singapore, Vietnam, and Thailand.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@param productId 
@return ApiAnalytics202405ShopProductsProductIdPerformanceGetRequest
*/
func (a *AnalyticsV202405APIService) Analytics202405ShopProductsProductIdPerformanceGet(ctx context.Context, productId string) ApiAnalytics202405ShopProductsProductIdPerformanceGetRequest {
    return ApiAnalytics202405ShopProductsProductIdPerformanceGetRequest{
        ApiService: a,
        ctx: ctx,
        productId: productId,
    }
}

// Execute executes the request
//  @return Analytics202405GetShopProductPerformanceResponse
func (a *AnalyticsV202405APIService) Analytics202405ShopProductsProductIdPerformanceGetExecute(r ApiAnalytics202405ShopProductsProductIdPerformanceGetRequest) (*analytics_v202405.Analytics202405GetShopProductPerformanceResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodGet
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *analytics_v202405.Analytics202405GetShopProductPerformanceResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsV202405APIService.Analytics202405ShopProductsProductIdPerformanceGet")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/analytics/202405/shop_products/{product_id}/performance"
    localVarPath = strings.Replace(localVarPath, "{"+"product_id"+"}", url.PathEscape(parameterValueToString(r.productId, "productId")), -1)

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.startDateGe == nil {
        return localVarReturnValue, nil, reportError("startDateGe is required and must be specified")
    }
    if r.endDateLt == nil {
        return localVarReturnValue, nil, reportError("endDateLt is required and must be specified")
    }
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    parameterAddToHeaderOrQuery(localVarQueryParams, "start_date_ge", r.startDateGe, "")
    parameterAddToHeaderOrQuery(localVarQueryParams, "end_date_lt", r.endDateLt, "")
    if r.withComparison != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "with_comparison", r.withComparison, "")
    }
    if r.granularity != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "granularity", r.granularity, "")
    }
    if r.currency != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "currency", r.currency, "")
    }
    if r.shopCipher != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "shop_cipher", r.shopCipher, "")
    }
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}
