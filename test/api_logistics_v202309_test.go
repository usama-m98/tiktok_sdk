/*
tiktok shop openapi

Testing LogisticsV202309APIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sdk_golang

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "tiktokshop/open/sdk_golang/apis"
)

func Test_sdk_golang_LogisticsV202309APIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test LogisticsV202309APIService Logistics202309DeliveryOptionsDeliveryOptionIdShippingProvidersGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deliveryOptionId string

		resp, httpRes, err := apiClient.LogisticsV202309API.Logistics202309DeliveryOptionsDeliveryOptionIdShippingProvidersGet(context.Background(), deliveryOptionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogisticsV202309APIService Logistics202309GlobalWarehousesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LogisticsV202309API.Logistics202309GlobalWarehousesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogisticsV202309APIService Logistics202309WarehousesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LogisticsV202309API.Logistics202309WarehousesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogisticsV202309APIService Logistics202309WarehousesWarehouseIdDeliveryOptionsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var warehouseId string

		resp, httpRes, err := apiClient.LogisticsV202309API.Logistics202309WarehousesWarehouseIdDeliveryOptionsGet(context.Background(), warehouseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
