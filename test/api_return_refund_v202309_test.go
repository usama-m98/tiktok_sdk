/*
tiktok shop openapi

Testing ReturnRefundV202309APIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sdk_golang

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "tiktokshop/open/sdk_golang/apis"
)

func Test_sdk_golang_ReturnRefundV202309APIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ReturnRefundV202309APIService ReturnRefund202309CancellationsCancelIdApprovePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cancelId string

		resp, httpRes, err := apiClient.ReturnRefundV202309API.ReturnRefund202309CancellationsCancelIdApprovePost(context.Background(), cancelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReturnRefundV202309APIService ReturnRefund202309CancellationsCancelIdRejectPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cancelId string

		resp, httpRes, err := apiClient.ReturnRefundV202309API.ReturnRefund202309CancellationsCancelIdRejectPost(context.Background(), cancelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReturnRefundV202309APIService ReturnRefund202309CancellationsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReturnRefundV202309API.ReturnRefund202309CancellationsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReturnRefundV202309APIService ReturnRefund202309CancellationsSearchPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReturnRefundV202309API.ReturnRefund202309CancellationsSearchPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReturnRefundV202309APIService ReturnRefund202309OrdersOrderIdAftersaleEligibilityGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderId string

		resp, httpRes, err := apiClient.ReturnRefundV202309API.ReturnRefund202309OrdersOrderIdAftersaleEligibilityGet(context.Background(), orderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReturnRefundV202309APIService ReturnRefund202309RefundsCalculatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReturnRefundV202309API.ReturnRefund202309RefundsCalculatePost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReturnRefundV202309APIService ReturnRefund202309RejectReasonsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReturnRefundV202309API.ReturnRefund202309RejectReasonsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReturnRefundV202309APIService ReturnRefund202309ReturnsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReturnRefundV202309API.ReturnRefund202309ReturnsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReturnRefundV202309APIService ReturnRefund202309ReturnsReturnIdApprovePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var returnId string

		resp, httpRes, err := apiClient.ReturnRefundV202309API.ReturnRefund202309ReturnsReturnIdApprovePost(context.Background(), returnId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReturnRefundV202309APIService ReturnRefund202309ReturnsReturnIdRecordsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var returnId string

		resp, httpRes, err := apiClient.ReturnRefundV202309API.ReturnRefund202309ReturnsReturnIdRecordsGet(context.Background(), returnId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReturnRefundV202309APIService ReturnRefund202309ReturnsReturnIdRejectPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var returnId string

		resp, httpRes, err := apiClient.ReturnRefundV202309API.ReturnRefund202309ReturnsReturnIdRejectPost(context.Background(), returnId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReturnRefundV202309APIService ReturnRefund202309ReturnsSearchPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReturnRefundV202309API.ReturnRefund202309ReturnsSearchPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
