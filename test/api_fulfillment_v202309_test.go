/*
tiktok shop openapi

Testing FulfillmentV202309APIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sdk_golang

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "tiktokshop/open/sdk_golang/apis"
)

func Test_sdk_golang_FulfillmentV202309APIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test FulfillmentV202309APIService Fulfillment202309CombinablePackagesSearchGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FulfillmentV202309API.Fulfillment202309CombinablePackagesSearchGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FulfillmentV202309APIService Fulfillment202309FilesUploadPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FulfillmentV202309API.Fulfillment202309FilesUploadPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FulfillmentV202309APIService Fulfillment202309ImagesUploadPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FulfillmentV202309API.Fulfillment202309ImagesUploadPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FulfillmentV202309APIService Fulfillment202309OrdersOrderIdHandoverTimeSlotsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderId string

		resp, httpRes, err := apiClient.FulfillmentV202309API.Fulfillment202309OrdersOrderIdHandoverTimeSlotsGet(context.Background(), orderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FulfillmentV202309APIService Fulfillment202309OrdersOrderIdPackagesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderId string

		resp, httpRes, err := apiClient.FulfillmentV202309API.Fulfillment202309OrdersOrderIdPackagesPost(context.Background(), orderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FulfillmentV202309APIService Fulfillment202309OrdersOrderIdShippingInfoUpdatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderId string

		resp, httpRes, err := apiClient.FulfillmentV202309API.Fulfillment202309OrdersOrderIdShippingInfoUpdatePost(context.Background(), orderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FulfillmentV202309APIService Fulfillment202309OrdersOrderIdShippingServicesQueryPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderId string

		resp, httpRes, err := apiClient.FulfillmentV202309API.Fulfillment202309OrdersOrderIdShippingServicesQueryPost(context.Background(), orderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FulfillmentV202309APIService Fulfillment202309OrdersOrderIdSplitPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderId string

		resp, httpRes, err := apiClient.FulfillmentV202309API.Fulfillment202309OrdersOrderIdSplitPost(context.Background(), orderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FulfillmentV202309APIService Fulfillment202309OrdersOrderIdTrackingGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderId string

		resp, httpRes, err := apiClient.FulfillmentV202309API.Fulfillment202309OrdersOrderIdTrackingGet(context.Background(), orderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FulfillmentV202309APIService Fulfillment202309OrdersSplitAttributesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FulfillmentV202309API.Fulfillment202309OrdersSplitAttributesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FulfillmentV202309APIService Fulfillment202309PackagesCombinePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FulfillmentV202309API.Fulfillment202309PackagesCombinePost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FulfillmentV202309APIService Fulfillment202309PackagesDeliverPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FulfillmentV202309API.Fulfillment202309PackagesDeliverPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FulfillmentV202309APIService Fulfillment202309PackagesPackageIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var packageId string

		resp, httpRes, err := apiClient.FulfillmentV202309API.Fulfillment202309PackagesPackageIdGet(context.Background(), packageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FulfillmentV202309APIService Fulfillment202309PackagesPackageIdHandoverTimeSlotsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var packageId string

		resp, httpRes, err := apiClient.FulfillmentV202309API.Fulfillment202309PackagesPackageIdHandoverTimeSlotsGet(context.Background(), packageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FulfillmentV202309APIService Fulfillment202309PackagesPackageIdShipPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var packageId string

		resp, httpRes, err := apiClient.FulfillmentV202309API.Fulfillment202309PackagesPackageIdShipPost(context.Background(), packageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FulfillmentV202309APIService Fulfillment202309PackagesPackageIdShippingDocumentsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var packageId string

		resp, httpRes, err := apiClient.FulfillmentV202309API.Fulfillment202309PackagesPackageIdShippingDocumentsGet(context.Background(), packageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FulfillmentV202309APIService Fulfillment202309PackagesPackageIdShippingInfoUpdatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var packageId string

		resp, httpRes, err := apiClient.FulfillmentV202309API.Fulfillment202309PackagesPackageIdShippingInfoUpdatePost(context.Background(), packageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FulfillmentV202309APIService Fulfillment202309PackagesPackageIdUncombinePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var packageId string

		resp, httpRes, err := apiClient.FulfillmentV202309API.Fulfillment202309PackagesPackageIdUncombinePost(context.Background(), packageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FulfillmentV202309APIService Fulfillment202309PackagesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FulfillmentV202309API.Fulfillment202309PackagesPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FulfillmentV202309APIService Fulfillment202309PackagesSchedulePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FulfillmentV202309API.Fulfillment202309PackagesSchedulePost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FulfillmentV202309APIService Fulfillment202309PackagesSearchPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FulfillmentV202309API.Fulfillment202309PackagesSearchPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FulfillmentV202309APIService Fulfillment202309PackagesShipPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FulfillmentV202309API.Fulfillment202309PackagesShipPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
